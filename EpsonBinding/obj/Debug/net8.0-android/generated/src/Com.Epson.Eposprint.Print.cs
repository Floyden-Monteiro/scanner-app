//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Epson.Eposprint {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']"
	[global::Android.Runtime.Register ("com/epson/eposprint/Print", DoNotGenerateAcw=true)]
	public partial class Print : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='DEVTYPE_BLUETOOTH']"
		[Register ("DEVTYPE_BLUETOOTH")]
		public const int DevtypeBluetooth = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='DEVTYPE_TCP']"
		[Register ("DEVTYPE_TCP")]
		public const int DevtypeTcp = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='DEVTYPE_USB']"
		[Register ("DEVTYPE_USB")]
		public const int DevtypeUsb = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='FALSE']"
		[Register ("FALSE")]
		public const int False = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='PARAM_DEFAULT']"
		[Register ("PARAM_DEFAULT")]
		public const int ParamDefault = (int) -2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='PARAM_UNSPECIFIED']"
		[Register ("PARAM_UNSPECIFIED")]
		public const int ParamUnspecified = (int) -1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_AUTOCUTTER_ERR']"
		[Register ("ST_AUTOCUTTER_ERR")]
		public const int StAutocutterErr = (int) 2048;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_AUTORECOVER_ERR']"
		[Register ("ST_AUTORECOVER_ERR")]
		public const int StAutorecoverErr = (int) 16384;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_BATTERY_OFFLINE']"
		[Register ("ST_BATTERY_OFFLINE")]
		public const int StBatteryOffline = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_BATTERY_OVERHEAT']"
		[Register ("ST_BATTERY_OVERHEAT")]
		public const int StBatteryOverheat = (int) 1073741824;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_BUZZER']"
		[Register ("ST_BUZZER")]
		public const int StBuzzer = (int) 16777216;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_COVER_OPEN']"
		[Register ("ST_COVER_OPEN")]
		public const int StCoverOpen = (int) 32;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_DRAWER_KICK']"
		[Register ("ST_DRAWER_KICK")]
		public const int StDrawerKick = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_HEAD_OVERHEAT']"
		[Register ("ST_HEAD_OVERHEAT")]
		public const int StHeadOverheat = (int) 268435456;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_MECHANICAL_ERR']"
		[Register ("ST_MECHANICAL_ERR")]
		public const int StMechanicalErr = (int) 1024;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_MOTOR_OVERHEAT']"
		[Register ("ST_MOTOR_OVERHEAT")]
		public const int StMotorOverheat = (int) 536870912;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_NO_RESPONSE']"
		[Register ("ST_NO_RESPONSE")]
		public const int StNoResponse = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_OFF_LINE']"
		[Register ("ST_OFF_LINE")]
		public const int StOffLine = (int) 8;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_PANEL_SWITCH']"
		[Register ("ST_PANEL_SWITCH")]
		public const int StPanelSwitch = (int) 512;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_PAPER_FEED']"
		[Register ("ST_PAPER_FEED")]
		public const int StPaperFeed = (int) 64;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_PRINT_SUCCESS']"
		[Register ("ST_PRINT_SUCCESS")]
		public const int StPrintSuccess = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_RECEIPT_END']"
		[Register ("ST_RECEIPT_END")]
		public const int StReceiptEnd = (int) 524288;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_RECEIPT_NEAR_END']"
		[Register ("ST_RECEIPT_NEAR_END")]
		public const int StReceiptNearEnd = (int) 131072;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_UNRECOVER_ERR']"
		[Register ("ST_UNRECOVER_ERR")]
		public const int StUnrecoverErr = (int) 8192;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_WAIT_ON_LINE']"
		[Register ("ST_WAIT_ON_LINE")]
		public const int StWaitOnLine = (int) 256;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='ST_WRONG_PAPER']"
		[Register ("ST_WRONG_PAPER")]
		public const int StWrongPaper = (int) 4096;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/field[@name='TRUE']"
		[Register ("TRUE")]
		public const int True = (int) 1;

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/eposprint/Print", typeof (Print));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Print (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/constructor[@name='Print' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe Print () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/constructor[@name='Print' and count(parameter)=1 and parameter[1][@type='android.content.Context']]"
		[Register (".ctor", "(Landroid/content/Context;)V", "")]
		public unsafe Print (global::Android.Content.Context? context) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Landroid/content/Context;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (context);
			}
		}

		static Delegate? cb_beginTransaction;
#pragma warning disable 0169
		static Delegate GetBeginTransactionHandler ()
		{
			if (cb_beginTransaction == null)
				cb_beginTransaction = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_BeginTransaction));
			return cb_beginTransaction;
		}

		static void n_BeginTransaction (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.BeginTransaction ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='beginTransaction' and count(parameter)=0]"
		[Register ("beginTransaction", "()V", "GetBeginTransactionHandler")]
		public virtual unsafe void BeginTransaction ()
		{
			const string __id = "beginTransaction.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_closePrinter;
#pragma warning disable 0169
		static Delegate GetClosePrinterHandler ()
		{
			if (cb_closePrinter == null)
				cb_closePrinter = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_ClosePrinter));
			return cb_closePrinter;
		}

		static void n_ClosePrinter (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.ClosePrinter ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='closePrinter' and count(parameter)=0]"
		[Register ("closePrinter", "()V", "GetClosePrinterHandler")]
		public virtual unsafe void ClosePrinter ()
		{
			const string __id = "closePrinter.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_endTransaction;
#pragma warning disable 0169
		static Delegate GetEndTransactionHandler ()
		{
			if (cb_endTransaction == null)
				cb_endTransaction = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_EndTransaction));
			return cb_endTransaction;
		}

		static void n_EndTransaction (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.EndTransaction ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='endTransaction' and count(parameter)=0]"
		[Register ("endTransaction", "()V", "GetEndTransactionHandler")]
		public virtual unsafe void EndTransaction ()
		{
			const string __id = "endTransaction.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_getStatus_arrayIarrayI;
#pragma warning disable 0169
		static Delegate GetGetStatus_arrayIarrayIHandler ()
		{
			if (cb_getStatus_arrayIarrayI == null)
				cb_getStatus_arrayIarrayI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLL_V (n_GetStatus_arrayIarrayI));
			return cb_getStatus_arrayIarrayI;
		}

		static void n_GetStatus_arrayIarrayI (IntPtr jnienv, IntPtr native__this, IntPtr native_status, IntPtr native_battery)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var status = (int[]?) JNIEnv.GetArray (native_status, JniHandleOwnership.DoNotTransfer, typeof (int));
			var battery = (int[]?) JNIEnv.GetArray (native_battery, JniHandleOwnership.DoNotTransfer, typeof (int));
			__this.GetStatus (status, battery);
			if (status != null)
				JNIEnv.CopyArray (status, native_status);
			if (battery != null)
				JNIEnv.CopyArray (battery, native_battery);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='getStatus' and count(parameter)=2 and parameter[1][@type='int[]'] and parameter[2][@type='int[]']]"
		[Register ("getStatus", "([I[I)V", "GetGetStatus_arrayIarrayIHandler")]
		public virtual unsafe void GetStatus (int[]? status, int[]? battery)
		{
			const string __id = "getStatus.([I[I)V";
			IntPtr native_status = JNIEnv.NewArray (status);
			IntPtr native_battery = JNIEnv.NewArray (battery);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_status);
				__args [1] = new JniArgumentValue (native_battery);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (status != null) {
					JNIEnv.CopyArray (native_status, status);
					JNIEnv.DeleteLocalRef (native_status);
				}
				if (battery != null) {
					JNIEnv.CopyArray (native_battery, battery);
					JNIEnv.DeleteLocalRef (native_battery);
				}
				global::System.GC.KeepAlive (status);
				global::System.GC.KeepAlive (battery);
			}
		}

		static Delegate? cb_openPrinter_ILjava_lang_String_;
#pragma warning disable 0169
		static Delegate GetOpenPrinter_ILjava_lang_String_Handler ()
		{
			if (cb_openPrinter_ILjava_lang_String_ == null)
				cb_openPrinter_ILjava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIL_V (n_OpenPrinter_ILjava_lang_String_));
			return cb_openPrinter_ILjava_lang_String_;
		}

		static void n_OpenPrinter_ILjava_lang_String_ (IntPtr jnienv, IntPtr native__this, int deviceType, IntPtr native_deviceName)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var deviceName = JNIEnv.GetString (native_deviceName, JniHandleOwnership.DoNotTransfer);
			__this.OpenPrinter (deviceType, deviceName);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='openPrinter' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String']]"
		[Register ("openPrinter", "(ILjava/lang/String;)V", "GetOpenPrinter_ILjava_lang_String_Handler")]
		public virtual unsafe void OpenPrinter (int deviceType, string? deviceName)
		{
			const string __id = "openPrinter.(ILjava/lang/String;)V";
			IntPtr native_deviceName = JNIEnv.NewString ((string?)deviceName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (deviceType);
				__args [1] = new JniArgumentValue (native_deviceName);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_deviceName);
			}
		}

		static Delegate? cb_openPrinter_ILjava_lang_String_II;
#pragma warning disable 0169
		static Delegate GetOpenPrinter_ILjava_lang_String_IIHandler ()
		{
			if (cb_openPrinter_ILjava_lang_String_II == null)
				cb_openPrinter_ILjava_lang_String_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPILII_V (n_OpenPrinter_ILjava_lang_String_II));
			return cb_openPrinter_ILjava_lang_String_II;
		}

		static void n_OpenPrinter_ILjava_lang_String_II (IntPtr jnienv, IntPtr native__this, int deviceType, IntPtr native_deviceName, int enabled, int interval)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var deviceName = JNIEnv.GetString (native_deviceName, JniHandleOwnership.DoNotTransfer);
			__this.OpenPrinter (deviceType, deviceName, enabled, interval);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='openPrinter' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("openPrinter", "(ILjava/lang/String;II)V", "GetOpenPrinter_ILjava_lang_String_IIHandler")]
		public virtual unsafe void OpenPrinter (int deviceType, string? deviceName, int enabled, int interval)
		{
			const string __id = "openPrinter.(ILjava/lang/String;II)V";
			IntPtr native_deviceName = JNIEnv.NewString ((string?)deviceName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (deviceType);
				__args [1] = new JniArgumentValue (native_deviceName);
				__args [2] = new JniArgumentValue (enabled);
				__args [3] = new JniArgumentValue (interval);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_deviceName);
			}
		}

		static Delegate? cb_openPrinter_ILjava_lang_String_III;
#pragma warning disable 0169
		static Delegate GetOpenPrinter_ILjava_lang_String_IIIHandler ()
		{
			if (cb_openPrinter_ILjava_lang_String_III == null)
				cb_openPrinter_ILjava_lang_String_III = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPILIII_V (n_OpenPrinter_ILjava_lang_String_III));
			return cb_openPrinter_ILjava_lang_String_III;
		}

		static void n_OpenPrinter_ILjava_lang_String_III (IntPtr jnienv, IntPtr native__this, int deviceType, IntPtr native_deviceName, int enabled, int interval, int timeout)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var deviceName = JNIEnv.GetString (native_deviceName, JniHandleOwnership.DoNotTransfer);
			__this.OpenPrinter (deviceType, deviceName, enabled, interval, timeout);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='openPrinter' and count(parameter)=5 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("openPrinter", "(ILjava/lang/String;III)V", "GetOpenPrinter_ILjava_lang_String_IIIHandler")]
		public virtual unsafe void OpenPrinter (int deviceType, string? deviceName, int enabled, int interval, int timeout)
		{
			const string __id = "openPrinter.(ILjava/lang/String;III)V";
			IntPtr native_deviceName = JNIEnv.NewString ((string?)deviceName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (deviceType);
				__args [1] = new JniArgumentValue (native_deviceName);
				__args [2] = new JniArgumentValue (enabled);
				__args [3] = new JniArgumentValue (interval);
				__args [4] = new JniArgumentValue (timeout);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_deviceName);
			}
		}

		static Delegate? cb_sendData_Lcom_epson_eposprint_Builder_IarrayI;
#pragma warning disable 0169
		static Delegate GetSendData_Lcom_epson_eposprint_Builder_IarrayIHandler ()
		{
			if (cb_sendData_Lcom_epson_eposprint_Builder_IarrayI == null)
				cb_sendData_Lcom_epson_eposprint_Builder_IarrayI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIL_V (n_SendData_Lcom_epson_eposprint_Builder_IarrayI));
			return cb_sendData_Lcom_epson_eposprint_Builder_IarrayI;
		}

		static void n_SendData_Lcom_epson_eposprint_Builder_IarrayI (IntPtr jnienv, IntPtr native__this, IntPtr native_builder, int timeout, IntPtr native_status)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var builder = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (native_builder, JniHandleOwnership.DoNotTransfer);
			var status = (int[]?) JNIEnv.GetArray (native_status, JniHandleOwnership.DoNotTransfer, typeof (int));
			__this.SendData (builder, timeout, status);
			if (status != null)
				JNIEnv.CopyArray (status, native_status);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='sendData' and count(parameter)=3 and parameter[1][@type='com.epson.eposprint.Builder'] and parameter[2][@type='int'] and parameter[3][@type='int[]']]"
		[Register ("sendData", "(Lcom/epson/eposprint/Builder;I[I)V", "GetSendData_Lcom_epson_eposprint_Builder_IarrayIHandler")]
		public virtual unsafe void SendData (global::Com.Epson.Eposprint.Builder? builder, int timeout, int[]? status)
		{
			const string __id = "sendData.(Lcom/epson/eposprint/Builder;I[I)V";
			IntPtr native_status = JNIEnv.NewArray (status);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((builder == null) ? IntPtr.Zero : ((global::Java.Lang.Object) builder).Handle);
				__args [1] = new JniArgumentValue (timeout);
				__args [2] = new JniArgumentValue (native_status);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (status != null) {
					JNIEnv.CopyArray (native_status, status);
					JNIEnv.DeleteLocalRef (native_status);
				}
				global::System.GC.KeepAlive (builder);
				global::System.GC.KeepAlive (status);
			}
		}

		static Delegate? cb_sendData_Lcom_epson_eposprint_Builder_IarrayIarrayI;
#pragma warning disable 0169
		static Delegate GetSendData_Lcom_epson_eposprint_Builder_IarrayIarrayIHandler ()
		{
			if (cb_sendData_Lcom_epson_eposprint_Builder_IarrayIarrayI == null)
				cb_sendData_Lcom_epson_eposprint_Builder_IarrayIarrayI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLILL_V (n_SendData_Lcom_epson_eposprint_Builder_IarrayIarrayI));
			return cb_sendData_Lcom_epson_eposprint_Builder_IarrayIarrayI;
		}

		static void n_SendData_Lcom_epson_eposprint_Builder_IarrayIarrayI (IntPtr jnienv, IntPtr native__this, IntPtr native_builder, int timeout, IntPtr native_status, IntPtr native_battery)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var builder = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (native_builder, JniHandleOwnership.DoNotTransfer);
			var status = (int[]?) JNIEnv.GetArray (native_status, JniHandleOwnership.DoNotTransfer, typeof (int));
			var battery = (int[]?) JNIEnv.GetArray (native_battery, JniHandleOwnership.DoNotTransfer, typeof (int));
			__this.SendData (builder, timeout, status, battery);
			if (status != null)
				JNIEnv.CopyArray (status, native_status);
			if (battery != null)
				JNIEnv.CopyArray (battery, native_battery);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='sendData' and count(parameter)=4 and parameter[1][@type='com.epson.eposprint.Builder'] and parameter[2][@type='int'] and parameter[3][@type='int[]'] and parameter[4][@type='int[]']]"
		[Register ("sendData", "(Lcom/epson/eposprint/Builder;I[I[I)V", "GetSendData_Lcom_epson_eposprint_Builder_IarrayIarrayIHandler")]
		public virtual unsafe void SendData (global::Com.Epson.Eposprint.Builder? builder, int timeout, int[]? status, int[]? battery)
		{
			const string __id = "sendData.(Lcom/epson/eposprint/Builder;I[I[I)V";
			IntPtr native_status = JNIEnv.NewArray (status);
			IntPtr native_battery = JNIEnv.NewArray (battery);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((builder == null) ? IntPtr.Zero : ((global::Java.Lang.Object) builder).Handle);
				__args [1] = new JniArgumentValue (timeout);
				__args [2] = new JniArgumentValue (native_status);
				__args [3] = new JniArgumentValue (native_battery);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (status != null) {
					JNIEnv.CopyArray (native_status, status);
					JNIEnv.DeleteLocalRef (native_status);
				}
				if (battery != null) {
					JNIEnv.CopyArray (native_battery, battery);
					JNIEnv.DeleteLocalRef (native_battery);
				}
				global::System.GC.KeepAlive (builder);
				global::System.GC.KeepAlive (status);
				global::System.GC.KeepAlive (battery);
			}
		}

		static Delegate? cb_setBatteryLowEventCallback_Lcom_epson_eposprint_BatteryLowEventListener_;
#pragma warning disable 0169
		static Delegate GetSetBatteryLowEventCallback_Lcom_epson_eposprint_BatteryLowEventListener_Handler ()
		{
			if (cb_setBatteryLowEventCallback_Lcom_epson_eposprint_BatteryLowEventListener_ == null)
				cb_setBatteryLowEventCallback_Lcom_epson_eposprint_BatteryLowEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetBatteryLowEventCallback_Lcom_epson_eposprint_BatteryLowEventListener_));
			return cb_setBatteryLowEventCallback_Lcom_epson_eposprint_BatteryLowEventListener_;
		}

		static void n_SetBatteryLowEventCallback_Lcom_epson_eposprint_BatteryLowEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_batteryLowEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var batteryLowEventListener = (global::Com.Epson.Eposprint.IBatteryLowEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IBatteryLowEventListener> (native_batteryLowEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetBatteryLowEventCallback (batteryLowEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setBatteryLowEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.BatteryLowEventListener']]"
		[Register ("setBatteryLowEventCallback", "(Lcom/epson/eposprint/BatteryLowEventListener;)V", "GetSetBatteryLowEventCallback_Lcom_epson_eposprint_BatteryLowEventListener_Handler")]
		public virtual unsafe void SetBatteryLowEventCallback (global::Com.Epson.Eposprint.IBatteryLowEventListener? batteryLowEventListener)
		{
			const string __id = "setBatteryLowEventCallback.(Lcom/epson/eposprint/BatteryLowEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((batteryLowEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) batteryLowEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (batteryLowEventListener);
			}
		}

		static Delegate? cb_setBatteryOkEventCallback_Lcom_epson_eposprint_BatteryOkEventListener_;
#pragma warning disable 0169
		static Delegate GetSetBatteryOkEventCallback_Lcom_epson_eposprint_BatteryOkEventListener_Handler ()
		{
			if (cb_setBatteryOkEventCallback_Lcom_epson_eposprint_BatteryOkEventListener_ == null)
				cb_setBatteryOkEventCallback_Lcom_epson_eposprint_BatteryOkEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetBatteryOkEventCallback_Lcom_epson_eposprint_BatteryOkEventListener_));
			return cb_setBatteryOkEventCallback_Lcom_epson_eposprint_BatteryOkEventListener_;
		}

		static void n_SetBatteryOkEventCallback_Lcom_epson_eposprint_BatteryOkEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_batteryOkEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var batteryOkEventListener = (global::Com.Epson.Eposprint.IBatteryOkEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IBatteryOkEventListener> (native_batteryOkEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetBatteryOkEventCallback (batteryOkEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setBatteryOkEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.BatteryOkEventListener']]"
		[Register ("setBatteryOkEventCallback", "(Lcom/epson/eposprint/BatteryOkEventListener;)V", "GetSetBatteryOkEventCallback_Lcom_epson_eposprint_BatteryOkEventListener_Handler")]
		public virtual unsafe void SetBatteryOkEventCallback (global::Com.Epson.Eposprint.IBatteryOkEventListener? batteryOkEventListener)
		{
			const string __id = "setBatteryOkEventCallback.(Lcom/epson/eposprint/BatteryOkEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((batteryOkEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) batteryOkEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (batteryOkEventListener);
			}
		}

		static Delegate? cb_setBatteryStatusChangeEventCallback_Lcom_epson_eposprint_BatteryStatusChangeEventListener_;
#pragma warning disable 0169
		static Delegate GetSetBatteryStatusChangeEventCallback_Lcom_epson_eposprint_BatteryStatusChangeEventListener_Handler ()
		{
			if (cb_setBatteryStatusChangeEventCallback_Lcom_epson_eposprint_BatteryStatusChangeEventListener_ == null)
				cb_setBatteryStatusChangeEventCallback_Lcom_epson_eposprint_BatteryStatusChangeEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetBatteryStatusChangeEventCallback_Lcom_epson_eposprint_BatteryStatusChangeEventListener_));
			return cb_setBatteryStatusChangeEventCallback_Lcom_epson_eposprint_BatteryStatusChangeEventListener_;
		}

		static void n_SetBatteryStatusChangeEventCallback_Lcom_epson_eposprint_BatteryStatusChangeEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_batteryStatusChangeEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var batteryStatusChangeEventListener = (global::Com.Epson.Eposprint.IBatteryStatusChangeEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IBatteryStatusChangeEventListener> (native_batteryStatusChangeEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetBatteryStatusChangeEventCallback (batteryStatusChangeEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setBatteryStatusChangeEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.BatteryStatusChangeEventListener']]"
		[Register ("setBatteryStatusChangeEventCallback", "(Lcom/epson/eposprint/BatteryStatusChangeEventListener;)V", "GetSetBatteryStatusChangeEventCallback_Lcom_epson_eposprint_BatteryStatusChangeEventListener_Handler")]
		public virtual unsafe void SetBatteryStatusChangeEventCallback (global::Com.Epson.Eposprint.IBatteryStatusChangeEventListener? batteryStatusChangeEventListener)
		{
			const string __id = "setBatteryStatusChangeEventCallback.(Lcom/epson/eposprint/BatteryStatusChangeEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((batteryStatusChangeEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) batteryStatusChangeEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (batteryStatusChangeEventListener);
			}
		}

		static Delegate? cb_setCoverOkEventCallback_Lcom_epson_eposprint_CoverOkEventListener_;
#pragma warning disable 0169
		static Delegate GetSetCoverOkEventCallback_Lcom_epson_eposprint_CoverOkEventListener_Handler ()
		{
			if (cb_setCoverOkEventCallback_Lcom_epson_eposprint_CoverOkEventListener_ == null)
				cb_setCoverOkEventCallback_Lcom_epson_eposprint_CoverOkEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetCoverOkEventCallback_Lcom_epson_eposprint_CoverOkEventListener_));
			return cb_setCoverOkEventCallback_Lcom_epson_eposprint_CoverOkEventListener_;
		}

		static void n_SetCoverOkEventCallback_Lcom_epson_eposprint_CoverOkEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_coverOkEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var coverOkEventListener = (global::Com.Epson.Eposprint.ICoverOkEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.ICoverOkEventListener> (native_coverOkEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetCoverOkEventCallback (coverOkEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setCoverOkEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.CoverOkEventListener']]"
		[Register ("setCoverOkEventCallback", "(Lcom/epson/eposprint/CoverOkEventListener;)V", "GetSetCoverOkEventCallback_Lcom_epson_eposprint_CoverOkEventListener_Handler")]
		public virtual unsafe void SetCoverOkEventCallback (global::Com.Epson.Eposprint.ICoverOkEventListener? coverOkEventListener)
		{
			const string __id = "setCoverOkEventCallback.(Lcom/epson/eposprint/CoverOkEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((coverOkEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) coverOkEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (coverOkEventListener);
			}
		}

		static Delegate? cb_setCoverOpenEventCallback_Lcom_epson_eposprint_CoverOpenEventListener_;
#pragma warning disable 0169
		static Delegate GetSetCoverOpenEventCallback_Lcom_epson_eposprint_CoverOpenEventListener_Handler ()
		{
			if (cb_setCoverOpenEventCallback_Lcom_epson_eposprint_CoverOpenEventListener_ == null)
				cb_setCoverOpenEventCallback_Lcom_epson_eposprint_CoverOpenEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetCoverOpenEventCallback_Lcom_epson_eposprint_CoverOpenEventListener_));
			return cb_setCoverOpenEventCallback_Lcom_epson_eposprint_CoverOpenEventListener_;
		}

		static void n_SetCoverOpenEventCallback_Lcom_epson_eposprint_CoverOpenEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_coverOpenEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var coverOpenEventListener = (global::Com.Epson.Eposprint.ICoverOpenEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.ICoverOpenEventListener> (native_coverOpenEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetCoverOpenEventCallback (coverOpenEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setCoverOpenEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.CoverOpenEventListener']]"
		[Register ("setCoverOpenEventCallback", "(Lcom/epson/eposprint/CoverOpenEventListener;)V", "GetSetCoverOpenEventCallback_Lcom_epson_eposprint_CoverOpenEventListener_Handler")]
		public virtual unsafe void SetCoverOpenEventCallback (global::Com.Epson.Eposprint.ICoverOpenEventListener? coverOpenEventListener)
		{
			const string __id = "setCoverOpenEventCallback.(Lcom/epson/eposprint/CoverOpenEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((coverOpenEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) coverOpenEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (coverOpenEventListener);
			}
		}

		static Delegate? cb_setDrawerClosedEventCallback_Lcom_epson_eposprint_DrawerClosedEventListener_;
#pragma warning disable 0169
		static Delegate GetSetDrawerClosedEventCallback_Lcom_epson_eposprint_DrawerClosedEventListener_Handler ()
		{
			if (cb_setDrawerClosedEventCallback_Lcom_epson_eposprint_DrawerClosedEventListener_ == null)
				cb_setDrawerClosedEventCallback_Lcom_epson_eposprint_DrawerClosedEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetDrawerClosedEventCallback_Lcom_epson_eposprint_DrawerClosedEventListener_));
			return cb_setDrawerClosedEventCallback_Lcom_epson_eposprint_DrawerClosedEventListener_;
		}

		static void n_SetDrawerClosedEventCallback_Lcom_epson_eposprint_DrawerClosedEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_drawerClosedEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var drawerClosedEventListener = (global::Com.Epson.Eposprint.IDrawerClosedEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IDrawerClosedEventListener> (native_drawerClosedEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetDrawerClosedEventCallback (drawerClosedEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setDrawerClosedEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.DrawerClosedEventListener']]"
		[Register ("setDrawerClosedEventCallback", "(Lcom/epson/eposprint/DrawerClosedEventListener;)V", "GetSetDrawerClosedEventCallback_Lcom_epson_eposprint_DrawerClosedEventListener_Handler")]
		public virtual unsafe void SetDrawerClosedEventCallback (global::Com.Epson.Eposprint.IDrawerClosedEventListener? drawerClosedEventListener)
		{
			const string __id = "setDrawerClosedEventCallback.(Lcom/epson/eposprint/DrawerClosedEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((drawerClosedEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) drawerClosedEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (drawerClosedEventListener);
			}
		}

		static Delegate? cb_setDrawerOpenEventCallback_Lcom_epson_eposprint_DrawerOpenEventListener_;
#pragma warning disable 0169
		static Delegate GetSetDrawerOpenEventCallback_Lcom_epson_eposprint_DrawerOpenEventListener_Handler ()
		{
			if (cb_setDrawerOpenEventCallback_Lcom_epson_eposprint_DrawerOpenEventListener_ == null)
				cb_setDrawerOpenEventCallback_Lcom_epson_eposprint_DrawerOpenEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetDrawerOpenEventCallback_Lcom_epson_eposprint_DrawerOpenEventListener_));
			return cb_setDrawerOpenEventCallback_Lcom_epson_eposprint_DrawerOpenEventListener_;
		}

		static void n_SetDrawerOpenEventCallback_Lcom_epson_eposprint_DrawerOpenEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_drawerOpenEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var drawerOpenEventListener = (global::Com.Epson.Eposprint.IDrawerOpenEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IDrawerOpenEventListener> (native_drawerOpenEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetDrawerOpenEventCallback (drawerOpenEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setDrawerOpenEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.DrawerOpenEventListener']]"
		[Register ("setDrawerOpenEventCallback", "(Lcom/epson/eposprint/DrawerOpenEventListener;)V", "GetSetDrawerOpenEventCallback_Lcom_epson_eposprint_DrawerOpenEventListener_Handler")]
		public virtual unsafe void SetDrawerOpenEventCallback (global::Com.Epson.Eposprint.IDrawerOpenEventListener? drawerOpenEventListener)
		{
			const string __id = "setDrawerOpenEventCallback.(Lcom/epson/eposprint/DrawerOpenEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((drawerOpenEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) drawerOpenEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (drawerOpenEventListener);
			}
		}

		static Delegate? cb_setOfflineEventCallback_Lcom_epson_eposprint_OfflineEventListener_;
#pragma warning disable 0169
		static Delegate GetSetOfflineEventCallback_Lcom_epson_eposprint_OfflineEventListener_Handler ()
		{
			if (cb_setOfflineEventCallback_Lcom_epson_eposprint_OfflineEventListener_ == null)
				cb_setOfflineEventCallback_Lcom_epson_eposprint_OfflineEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetOfflineEventCallback_Lcom_epson_eposprint_OfflineEventListener_));
			return cb_setOfflineEventCallback_Lcom_epson_eposprint_OfflineEventListener_;
		}

		static void n_SetOfflineEventCallback_Lcom_epson_eposprint_OfflineEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_offlineEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var offlineEventListener = (global::Com.Epson.Eposprint.IOfflineEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IOfflineEventListener> (native_offlineEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetOfflineEventCallback (offlineEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setOfflineEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.OfflineEventListener']]"
		[Register ("setOfflineEventCallback", "(Lcom/epson/eposprint/OfflineEventListener;)V", "GetSetOfflineEventCallback_Lcom_epson_eposprint_OfflineEventListener_Handler")]
		public virtual unsafe void SetOfflineEventCallback (global::Com.Epson.Eposprint.IOfflineEventListener? offlineEventListener)
		{
			const string __id = "setOfflineEventCallback.(Lcom/epson/eposprint/OfflineEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((offlineEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) offlineEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (offlineEventListener);
			}
		}

		static Delegate? cb_setOnlineEventCallback_Lcom_epson_eposprint_OnlineEventListener_;
#pragma warning disable 0169
		static Delegate GetSetOnlineEventCallback_Lcom_epson_eposprint_OnlineEventListener_Handler ()
		{
			if (cb_setOnlineEventCallback_Lcom_epson_eposprint_OnlineEventListener_ == null)
				cb_setOnlineEventCallback_Lcom_epson_eposprint_OnlineEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetOnlineEventCallback_Lcom_epson_eposprint_OnlineEventListener_));
			return cb_setOnlineEventCallback_Lcom_epson_eposprint_OnlineEventListener_;
		}

		static void n_SetOnlineEventCallback_Lcom_epson_eposprint_OnlineEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_onlineEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var onlineEventListener = (global::Com.Epson.Eposprint.IOnlineEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IOnlineEventListener> (native_onlineEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetOnlineEventCallback (onlineEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setOnlineEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.OnlineEventListener']]"
		[Register ("setOnlineEventCallback", "(Lcom/epson/eposprint/OnlineEventListener;)V", "GetSetOnlineEventCallback_Lcom_epson_eposprint_OnlineEventListener_Handler")]
		public virtual unsafe void SetOnlineEventCallback (global::Com.Epson.Eposprint.IOnlineEventListener? onlineEventListener)
		{
			const string __id = "setOnlineEventCallback.(Lcom/epson/eposprint/OnlineEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((onlineEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) onlineEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (onlineEventListener);
			}
		}

		static Delegate? cb_setPaperEndEventCallback_Lcom_epson_eposprint_PaperEndEventListener_;
#pragma warning disable 0169
		static Delegate GetSetPaperEndEventCallback_Lcom_epson_eposprint_PaperEndEventListener_Handler ()
		{
			if (cb_setPaperEndEventCallback_Lcom_epson_eposprint_PaperEndEventListener_ == null)
				cb_setPaperEndEventCallback_Lcom_epson_eposprint_PaperEndEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetPaperEndEventCallback_Lcom_epson_eposprint_PaperEndEventListener_));
			return cb_setPaperEndEventCallback_Lcom_epson_eposprint_PaperEndEventListener_;
		}

		static void n_SetPaperEndEventCallback_Lcom_epson_eposprint_PaperEndEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_paperEndEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var paperEndEventListener = (global::Com.Epson.Eposprint.IPaperEndEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IPaperEndEventListener> (native_paperEndEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetPaperEndEventCallback (paperEndEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setPaperEndEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.PaperEndEventListener']]"
		[Register ("setPaperEndEventCallback", "(Lcom/epson/eposprint/PaperEndEventListener;)V", "GetSetPaperEndEventCallback_Lcom_epson_eposprint_PaperEndEventListener_Handler")]
		public virtual unsafe void SetPaperEndEventCallback (global::Com.Epson.Eposprint.IPaperEndEventListener? paperEndEventListener)
		{
			const string __id = "setPaperEndEventCallback.(Lcom/epson/eposprint/PaperEndEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((paperEndEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) paperEndEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (paperEndEventListener);
			}
		}

		static Delegate? cb_setPaperNearEndEventCallback_Lcom_epson_eposprint_PaperNearEndEventListener_;
#pragma warning disable 0169
		static Delegate GetSetPaperNearEndEventCallback_Lcom_epson_eposprint_PaperNearEndEventListener_Handler ()
		{
			if (cb_setPaperNearEndEventCallback_Lcom_epson_eposprint_PaperNearEndEventListener_ == null)
				cb_setPaperNearEndEventCallback_Lcom_epson_eposprint_PaperNearEndEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetPaperNearEndEventCallback_Lcom_epson_eposprint_PaperNearEndEventListener_));
			return cb_setPaperNearEndEventCallback_Lcom_epson_eposprint_PaperNearEndEventListener_;
		}

		static void n_SetPaperNearEndEventCallback_Lcom_epson_eposprint_PaperNearEndEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_paperNearEndEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var paperNearEndEventListener = (global::Com.Epson.Eposprint.IPaperNearEndEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IPaperNearEndEventListener> (native_paperNearEndEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetPaperNearEndEventCallback (paperNearEndEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setPaperNearEndEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.PaperNearEndEventListener']]"
		[Register ("setPaperNearEndEventCallback", "(Lcom/epson/eposprint/PaperNearEndEventListener;)V", "GetSetPaperNearEndEventCallback_Lcom_epson_eposprint_PaperNearEndEventListener_Handler")]
		public virtual unsafe void SetPaperNearEndEventCallback (global::Com.Epson.Eposprint.IPaperNearEndEventListener? paperNearEndEventListener)
		{
			const string __id = "setPaperNearEndEventCallback.(Lcom/epson/eposprint/PaperNearEndEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((paperNearEndEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) paperNearEndEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (paperNearEndEventListener);
			}
		}

		static Delegate? cb_setPaperOkEventCallback_Lcom_epson_eposprint_PaperOkEventListener_;
#pragma warning disable 0169
		static Delegate GetSetPaperOkEventCallback_Lcom_epson_eposprint_PaperOkEventListener_Handler ()
		{
			if (cb_setPaperOkEventCallback_Lcom_epson_eposprint_PaperOkEventListener_ == null)
				cb_setPaperOkEventCallback_Lcom_epson_eposprint_PaperOkEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetPaperOkEventCallback_Lcom_epson_eposprint_PaperOkEventListener_));
			return cb_setPaperOkEventCallback_Lcom_epson_eposprint_PaperOkEventListener_;
		}

		static void n_SetPaperOkEventCallback_Lcom_epson_eposprint_PaperOkEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_paperOkEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var paperOkEventListener = (global::Com.Epson.Eposprint.IPaperOkEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IPaperOkEventListener> (native_paperOkEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetPaperOkEventCallback (paperOkEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setPaperOkEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.PaperOkEventListener']]"
		[Register ("setPaperOkEventCallback", "(Lcom/epson/eposprint/PaperOkEventListener;)V", "GetSetPaperOkEventCallback_Lcom_epson_eposprint_PaperOkEventListener_Handler")]
		public virtual unsafe void SetPaperOkEventCallback (global::Com.Epson.Eposprint.IPaperOkEventListener? paperOkEventListener)
		{
			const string __id = "setPaperOkEventCallback.(Lcom/epson/eposprint/PaperOkEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((paperOkEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) paperOkEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (paperOkEventListener);
			}
		}

		static Delegate? cb_setPowerOffEventCallback_Lcom_epson_eposprint_PowerOffEventListener_;
#pragma warning disable 0169
		static Delegate GetSetPowerOffEventCallback_Lcom_epson_eposprint_PowerOffEventListener_Handler ()
		{
			if (cb_setPowerOffEventCallback_Lcom_epson_eposprint_PowerOffEventListener_ == null)
				cb_setPowerOffEventCallback_Lcom_epson_eposprint_PowerOffEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetPowerOffEventCallback_Lcom_epson_eposprint_PowerOffEventListener_));
			return cb_setPowerOffEventCallback_Lcom_epson_eposprint_PowerOffEventListener_;
		}

		static void n_SetPowerOffEventCallback_Lcom_epson_eposprint_PowerOffEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_powerOffEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var powerOffEventListener = (global::Com.Epson.Eposprint.IPowerOffEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IPowerOffEventListener> (native_powerOffEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetPowerOffEventCallback (powerOffEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setPowerOffEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.PowerOffEventListener']]"
		[Register ("setPowerOffEventCallback", "(Lcom/epson/eposprint/PowerOffEventListener;)V", "GetSetPowerOffEventCallback_Lcom_epson_eposprint_PowerOffEventListener_Handler")]
		public virtual unsafe void SetPowerOffEventCallback (global::Com.Epson.Eposprint.IPowerOffEventListener? powerOffEventListener)
		{
			const string __id = "setPowerOffEventCallback.(Lcom/epson/eposprint/PowerOffEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((powerOffEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) powerOffEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (powerOffEventListener);
			}
		}

		static Delegate? cb_setStatusChangeEventCallback_Lcom_epson_eposprint_StatusChangeEventListener_;
#pragma warning disable 0169
		static Delegate GetSetStatusChangeEventCallback_Lcom_epson_eposprint_StatusChangeEventListener_Handler ()
		{
			if (cb_setStatusChangeEventCallback_Lcom_epson_eposprint_StatusChangeEventListener_ == null)
				cb_setStatusChangeEventCallback_Lcom_epson_eposprint_StatusChangeEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetStatusChangeEventCallback_Lcom_epson_eposprint_StatusChangeEventListener_));
			return cb_setStatusChangeEventCallback_Lcom_epson_eposprint_StatusChangeEventListener_;
		}

		static void n_SetStatusChangeEventCallback_Lcom_epson_eposprint_StatusChangeEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_statusChangeEventListener)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Print> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var statusChangeEventListener = (global::Com.Epson.Eposprint.IStatusChangeEventListener?)global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.IStatusChangeEventListener> (native_statusChangeEventListener, JniHandleOwnership.DoNotTransfer);
			__this.SetStatusChangeEventCallback (statusChangeEventListener);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Print']/method[@name='setStatusChangeEventCallback' and count(parameter)=1 and parameter[1][@type='com.epson.eposprint.StatusChangeEventListener']]"
		[Register ("setStatusChangeEventCallback", "(Lcom/epson/eposprint/StatusChangeEventListener;)V", "GetSetStatusChangeEventCallback_Lcom_epson_eposprint_StatusChangeEventListener_Handler")]
		public virtual unsafe void SetStatusChangeEventCallback (global::Com.Epson.Eposprint.IStatusChangeEventListener? statusChangeEventListener)
		{
			const string __id = "setStatusChangeEventCallback.(Lcom/epson/eposprint/StatusChangeEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((statusChangeEventListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) statusChangeEventListener).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (statusChangeEventListener);
			}
		}

	}
}
