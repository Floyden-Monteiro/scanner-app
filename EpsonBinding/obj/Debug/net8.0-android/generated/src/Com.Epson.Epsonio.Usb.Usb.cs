//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Epson.Epsonio.Usb {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']"
	[global::Android.Runtime.Register ("com/epson/epsonio/usb/Usb", DoNotGenerateAcw=true)]
	public partial class Usb : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/field[@name='ACTION_USB_PERMISSION']"
		[Register ("ACTION_USB_PERMISSION")]
		protected const string ActionUsbPermission = (string) "com.android.eposprint.USB_PERMISSION";


		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/field[@name='mClassOutputLog']"
		[Register ("mClassOutputLog")]
		protected static global::Java.Lang.Class? MClassOutputLog {
			get {
				const string __id = "mClassOutputLog.Ljava/lang/Class;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Class> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "mClassOutputLog.Ljava/lang/Class;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/field[@name='mHandle']"
		[Register ("mHandle")]
		protected int MHandle {
			get {
				const string __id = "mHandle.I";

				var __v = _members.InstanceFields.GetInt32Value (__id, this);
				return __v;
			}
			set {
				const string __id = "mHandle.I";

				try {
					_members.InstanceFields.SetValue (__id, this, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/field[@name='mOutputLogInfoMethod']"
		[Register ("mOutputLogInfoMethod")]
		protected static global::Java.Lang.Reflect.Method? MOutputLogInfoMethod {
			get {
				const string __id = "mOutputLogInfoMethod.Ljava/lang/reflect/Method;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Reflect.Method> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "mOutputLogInfoMethod.Ljava/lang/reflect/Method;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/field[@name='M_INVALID_HANDLE_INDEX']"
		[Register ("M_INVALID_HANDLE_INDEX")]
		protected const int MInvalidHandleIndex = (int) -1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/field[@name='M_USB_AOA_CLASS']"
		[Register ("M_USB_AOA_CLASS")]
		protected const int MUsbAoaClass = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/field[@name='M_USB_DEVICE_CLASS']"
		[Register ("M_USB_DEVICE_CLASS")]
		protected const int MUsbDeviceClass = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/field[@name='M_USB_ILLEGAL_CLASS']"
		[Register ("M_USB_ILLEGAL_CLASS")]
		protected const int MUsbIllegalClass = (int) -1;

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/epsonio/usb/Usb", typeof (Usb));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Usb (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/constructor[@name='Usb' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe Usb () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_isPowerOn;
#pragma warning disable 0169
		static Delegate GetIsPowerOnHandler ()
		{
			if (cb_isPowerOn == null)
				cb_isPowerOn = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_IsPowerOn));
			return cb_isPowerOn;
		}

		static bool n_IsPowerOn (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.IsPowerOn;
		}
#pragma warning restore 0169

		public virtual unsafe bool IsPowerOn {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='isPowerOn' and count(parameter)=0]"
			[Register ("isPowerOn", "()Z", "GetIsPowerOnHandler")]
			get {
				const string __id = "isPowerOn.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		static Delegate? cb_getUsbType;
#pragma warning disable 0169
		static Delegate GetGetUsbTypeHandler ()
		{
			if (cb_getUsbType == null)
				cb_getUsbType = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_GetUsbType));
			return cb_getUsbType;
		}

		static int n_GetUsbType (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.UsbType;
		}
#pragma warning restore 0169

		public virtual unsafe int UsbType {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='getUsbType' and count(parameter)=0]"
			[Register ("getUsbType", "()I", "GetGetUsbTypeHandler")]
			get {
				const string __id = "getUsbType.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		static Delegate? cb_checkDevice_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetCheckDevice_Ljava_lang_String_Handler ()
		{
			if (cb_checkDevice_Ljava_lang_String_ == null)
				cb_checkDevice_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_CheckDevice_Ljava_lang_String_));
			return cb_checkDevice_Ljava_lang_String_;
		}

		static bool n_CheckDevice_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_deviceName)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var deviceName = JNIEnv.GetString (native_deviceName, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.CheckDevice (deviceName);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='checkDevice' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("checkDevice", "(Ljava/lang/String;)Z", "GetCheckDevice_Ljava_lang_String_Handler")]
		public virtual unsafe bool CheckDevice (string? deviceName)
		{
			const string __id = "checkDevice.(Ljava/lang/String;)Z";
			IntPtr native_deviceName = JNIEnv.NewString ((string?)deviceName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_deviceName);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_deviceName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='checkHandle' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("checkHandle", "(I)Z", "")]
		public unsafe bool CheckHandle (int handle)
		{
			const string __id = "checkHandle.(I)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (handle);
				var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		static Delegate? cb_close;
#pragma warning disable 0169
		static Delegate GetCloseHandler ()
		{
			if (cb_close == null)
				cb_close = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_Close));
			return cb_close;
		}

		static int n_Close (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.Close ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='close' and count(parameter)=0]"
		[Register ("close", "()I", "GetCloseHandler")]
		public virtual unsafe int Close ()
		{
			const string __id = "close.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		static Delegate? cb_enableFlowControl_I;
#pragma warning disable 0169
		static Delegate GetEnableFlowControl_IHandler ()
		{
			if (cb_enableFlowControl_I == null)
				cb_enableFlowControl_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_I (n_EnableFlowControl_I));
			return cb_enableFlowControl_I;
		}

		static int n_EnableFlowControl_I (IntPtr jnienv, IntPtr native__this, int enable)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.EnableFlowControl (enable);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='enableFlowControl' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("enableFlowControl", "(I)I", "GetEnableFlowControl_IHandler")]
		public virtual unsafe int EnableFlowControl (int enable)
		{
			const string __id = "enableFlowControl.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (enable);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		static Delegate? cb_getOnlineDMStatus_arrayI;
#pragma warning disable 0169
		static Delegate GetGetOnlineDMStatus_arrayIHandler ()
		{
			if (cb_getOnlineDMStatus_arrayI == null)
				cb_getOnlineDMStatus_arrayI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_I (n_GetOnlineDMStatus_arrayI));
			return cb_getOnlineDMStatus_arrayI;
		}

		static int n_GetOnlineDMStatus_arrayI (IntPtr jnienv, IntPtr native__this, IntPtr native_onlineStatus)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var onlineStatus = (int[]?) JNIEnv.GetArray (native_onlineStatus, JniHandleOwnership.DoNotTransfer, typeof (int));
			int __ret = __this.GetOnlineDMStatus (onlineStatus);
			if (onlineStatus != null)
				JNIEnv.CopyArray (onlineStatus, native_onlineStatus);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='getOnlineDMStatus' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("getOnlineDMStatus", "([I)I", "GetGetOnlineDMStatus_arrayIHandler")]
		public virtual unsafe int GetOnlineDMStatus (int[]? onlineStatus)
		{
			const string __id = "getOnlineDMStatus.([I)I";
			IntPtr native_onlineStatus = JNIEnv.NewArray (onlineStatus);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_onlineStatus);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (onlineStatus != null) {
					JNIEnv.CopyArray (native_onlineStatus, onlineStatus);
					JNIEnv.DeleteLocalRef (native_onlineStatus);
				}
				global::System.GC.KeepAlive (onlineStatus);
			}
		}

		static Delegate? cb_getOnlineTMStatus_arrayI;
#pragma warning disable 0169
		static Delegate GetGetOnlineTMStatus_arrayIHandler ()
		{
			if (cb_getOnlineTMStatus_arrayI == null)
				cb_getOnlineTMStatus_arrayI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_I (n_GetOnlineTMStatus_arrayI));
			return cb_getOnlineTMStatus_arrayI;
		}

		static int n_GetOnlineTMStatus_arrayI (IntPtr jnienv, IntPtr native__this, IntPtr native_onlineStatus)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var onlineStatus = (int[]?) JNIEnv.GetArray (native_onlineStatus, JniHandleOwnership.DoNotTransfer, typeof (int));
			int __ret = __this.GetOnlineTMStatus (onlineStatus);
			if (onlineStatus != null)
				JNIEnv.CopyArray (onlineStatus, native_onlineStatus);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='getOnlineTMStatus' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("getOnlineTMStatus", "([I)I", "GetGetOnlineTMStatus_arrayIHandler")]
		public virtual unsafe int GetOnlineTMStatus (int[]? onlineStatus)
		{
			const string __id = "getOnlineTMStatus.([I)I";
			IntPtr native_onlineStatus = JNIEnv.NewArray (onlineStatus);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_onlineStatus);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (onlineStatus != null) {
					JNIEnv.CopyArray (native_onlineStatus, onlineStatus);
					JNIEnv.DeleteLocalRef (native_onlineStatus);
				}
				global::System.GC.KeepAlive (onlineStatus);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='initializeOuputLogFunctions' and count(parameter)=0]"
		[Register ("initializeOuputLogFunctions", "()V", "")]
		protected static unsafe void InitializeOuputLogFunctions ()
		{
			const string __id = "initializeOuputLogFunctions.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		static Delegate? cb_open_ILjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetOpen_ILjava_lang_Object_Handler ()
		{
			if (cb_open_ILjava_lang_Object_ == null)
				cb_open_ILjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIL_I (n_Open_ILjava_lang_Object_));
			return cb_open_ILjava_lang_Object_;
		}

		static int n_Open_ILjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, int handle, IntPtr native_context)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var context = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_context, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.Open (handle, context);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='open' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.Object']]"
		[Register ("open", "(ILjava/lang/Object;)I", "GetOpen_ILjava_lang_Object_Handler")]
		public virtual unsafe int Open (int handle, global::Java.Lang.Object? context)
		{
			const string __id = "open.(ILjava/lang/Object;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (handle);
				__args [1] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (context);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='outputLogInfo' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("outputLogInfo", "([Ljava/lang/Object;)V", "")]
		protected static unsafe void OutputLogInfo (params global::Java.Lang.Object[]? param)
		{
			const string __id = "outputLogInfo.([Ljava/lang/Object;)V";
			IntPtr native_param = JNIEnv.NewArray (param);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_param);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (param != null) {
					JNIEnv.CopyArray (native_param, param);
					JNIEnv.DeleteLocalRef (native_param);
				}
				global::System.GC.KeepAlive (param);
			}
		}

		static Delegate? cb_read_arrayBIIarrayIarrayI;
#pragma warning disable 0169
		static Delegate GetRead_arrayBIIarrayIarrayIHandler ()
		{
			if (cb_read_arrayBIIarrayIarrayI == null)
				cb_read_arrayBIIarrayIarrayI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIILL_I (n_Read_arrayBIIarrayIarrayI));
			return cb_read_arrayBIIarrayIarrayI;
		}

		static int n_Read_arrayBIIarrayIarrayI (IntPtr jnienv, IntPtr native__this, IntPtr native_data, int offset, int dataSize, IntPtr native_timelimit, IntPtr native_readSize)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = (byte[]?) JNIEnv.GetArray (native_data, JniHandleOwnership.DoNotTransfer, typeof (byte));
			var timelimit = (int[]?) JNIEnv.GetArray (native_timelimit, JniHandleOwnership.DoNotTransfer, typeof (int));
			var readSize = (int[]?) JNIEnv.GetArray (native_readSize, JniHandleOwnership.DoNotTransfer, typeof (int));
			int __ret = __this.Read (data, offset, dataSize, timelimit, readSize);
			if (data != null)
				JNIEnv.CopyArray (data, native_data);
			if (timelimit != null)
				JNIEnv.CopyArray (timelimit, native_timelimit);
			if (readSize != null)
				JNIEnv.CopyArray (readSize, native_readSize);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='read' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int[]'] and parameter[5][@type='int[]']]"
		[Register ("read", "([BII[I[I)I", "GetRead_arrayBIIarrayIarrayIHandler")]
		public virtual unsafe int Read (byte[]? data, int offset, int dataSize, int[]? timelimit, int[]? readSize)
		{
			const string __id = "read.([BII[I[I)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_timelimit = JNIEnv.NewArray (timelimit);
			IntPtr native_readSize = JNIEnv.NewArray (readSize);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (dataSize);
				__args [3] = new JniArgumentValue (native_timelimit);
				__args [4] = new JniArgumentValue (native_readSize);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (timelimit != null) {
					JNIEnv.CopyArray (native_timelimit, timelimit);
					JNIEnv.DeleteLocalRef (native_timelimit);
				}
				if (readSize != null) {
					JNIEnv.CopyArray (native_readSize, readSize);
					JNIEnv.DeleteLocalRef (native_readSize);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (timelimit);
				global::System.GC.KeepAlive (readSize);
			}
		}

		static Delegate? cb_requestPermission_Ljava_lang_Object_Ljava_lang_String_arrayI;
#pragma warning disable 0169
		static Delegate GetRequestPermission_Ljava_lang_Object_Ljava_lang_String_arrayIHandler ()
		{
			if (cb_requestPermission_Ljava_lang_Object_Ljava_lang_String_arrayI == null)
				cb_requestPermission_Ljava_lang_Object_Ljava_lang_String_arrayI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLLL_I (n_RequestPermission_Ljava_lang_Object_Ljava_lang_String_arrayI));
			return cb_requestPermission_Ljava_lang_Object_Ljava_lang_String_arrayI;
		}

		static int n_RequestPermission_Ljava_lang_Object_Ljava_lang_String_arrayI (IntPtr jnienv, IntPtr native__this, IntPtr native_context, IntPtr native_deviceName, IntPtr native_timeout)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var context = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_context, JniHandleOwnership.DoNotTransfer);
			var deviceName = JNIEnv.GetString (native_deviceName, JniHandleOwnership.DoNotTransfer);
			var timeout = (int[]?) JNIEnv.GetArray (native_timeout, JniHandleOwnership.DoNotTransfer, typeof (int));
			int __ret = __this.RequestPermission (context, deviceName, timeout);
			if (timeout != null)
				JNIEnv.CopyArray (timeout, native_timeout);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='requestPermission' and count(parameter)=3 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int[]']]"
		[Register ("requestPermission", "(Ljava/lang/Object;Ljava/lang/String;[I)I", "GetRequestPermission_Ljava_lang_Object_Ljava_lang_String_arrayIHandler")]
		public virtual unsafe int RequestPermission (global::Java.Lang.Object? context, string? deviceName, int[]? timeout)
		{
			const string __id = "requestPermission.(Ljava/lang/Object;Ljava/lang/String;[I)I";
			IntPtr native_deviceName = JNIEnv.NewString ((string?)deviceName);
			IntPtr native_timeout = JNIEnv.NewArray (timeout);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				__args [1] = new JniArgumentValue (native_deviceName);
				__args [2] = new JniArgumentValue (native_timeout);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_deviceName);
				if (timeout != null) {
					JNIEnv.CopyArray (native_timeout, timeout);
					JNIEnv.DeleteLocalRef (native_timeout);
				}
				global::System.GC.KeepAlive (context);
				global::System.GC.KeepAlive (timeout);
			}
		}

		static Delegate? cb_setUsbInfo_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetSetUsbInfo_Ljava_lang_String_Handler ()
		{
			if (cb_setUsbInfo_Ljava_lang_String_ == null)
				cb_setUsbInfo_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_I (n_SetUsbInfo_Ljava_lang_String_));
			return cb_setUsbInfo_Ljava_lang_String_;
		}

		static int n_SetUsbInfo_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_deviceName)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var deviceName = JNIEnv.GetString (native_deviceName, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.SetUsbInfo (deviceName);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='setUsbInfo' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setUsbInfo", "(Ljava/lang/String;)I", "GetSetUsbInfo_Ljava_lang_String_Handler")]
		public virtual unsafe int SetUsbInfo (string? deviceName)
		{
			const string __id = "setUsbInfo.(Ljava/lang/String;)I";
			IntPtr native_deviceName = JNIEnv.NewString ((string?)deviceName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_deviceName);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_deviceName);
			}
		}

		static Delegate? cb_write_arrayBIIarrayIarrayI;
#pragma warning disable 0169
		static Delegate GetWrite_arrayBIIarrayIarrayIHandler ()
		{
			if (cb_write_arrayBIIarrayIarrayI == null)
				cb_write_arrayBIIarrayIarrayI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIILL_I (n_Write_arrayBIIarrayIarrayI));
			return cb_write_arrayBIIarrayIarrayI;
		}

		static int n_Write_arrayBIIarrayIarrayI (IntPtr jnienv, IntPtr native__this, IntPtr native_data, int offset, int dataSize, IntPtr native_timelimit, IntPtr native_sentSize)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.Usb> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = (byte[]?) JNIEnv.GetArray (native_data, JniHandleOwnership.DoNotTransfer, typeof (byte));
			var timelimit = (int[]?) JNIEnv.GetArray (native_timelimit, JniHandleOwnership.DoNotTransfer, typeof (int));
			var sentSize = (int[]?) JNIEnv.GetArray (native_sentSize, JniHandleOwnership.DoNotTransfer, typeof (int));
			int __ret = __this.Write (data, offset, dataSize, timelimit, sentSize);
			if (data != null)
				JNIEnv.CopyArray (data, native_data);
			if (timelimit != null)
				JNIEnv.CopyArray (timelimit, native_timelimit);
			if (sentSize != null)
				JNIEnv.CopyArray (sentSize, native_sentSize);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='Usb']/method[@name='write' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int[]'] and parameter[5][@type='int[]']]"
		[Register ("write", "([BII[I[I)I", "GetWrite_arrayBIIarrayIarrayIHandler")]
		public virtual unsafe int Write (byte[]? data, int offset, int dataSize, int[]? timelimit, int[]? sentSize)
		{
			const string __id = "write.([BII[I[I)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_timelimit = JNIEnv.NewArray (timelimit);
			IntPtr native_sentSize = JNIEnv.NewArray (sentSize);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (dataSize);
				__args [3] = new JniArgumentValue (native_timelimit);
				__args [4] = new JniArgumentValue (native_sentSize);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (timelimit != null) {
					JNIEnv.CopyArray (native_timelimit, timelimit);
					JNIEnv.DeleteLocalRef (native_timelimit);
				}
				if (sentSize != null) {
					JNIEnv.CopyArray (native_sentSize, sentSize);
					JNIEnv.DeleteLocalRef (native_sentSize);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (timelimit);
				global::System.GC.KeepAlive (sentSize);
			}
		}

	}
}
