//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Epson.Epsonio.Ble {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.epson.epsonio.ble']/class[@name='AbstractEpsonBleIoChip']"
	[global::Android.Runtime.Register ("com/epson/epsonio/ble/AbstractEpsonBleIoChip", DoNotGenerateAcw=true)]
	public abstract partial class AbstractEpsonBleIoChip : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/epsonio/ble/AbstractEpsonBleIoChip", typeof (AbstractEpsonBleIoChip));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected AbstractEpsonBleIoChip (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.epsonio.ble']/class[@name='AbstractEpsonBleIoChip']/constructor[@name='AbstractEpsonBleIoChip' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe AbstractEpsonBleIoChip () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_isPowerOn;
#pragma warning disable 0169
		static Delegate GetIsPowerOnHandler ()
		{
			if (cb_isPowerOn == null)
				cb_isPowerOn = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_IsPowerOn));
			return cb_isPowerOn;
		}

		static bool n_IsPowerOn (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Ble.AbstractEpsonBleIoChip> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.IsPowerOn;
		}
#pragma warning restore 0169

		public virtual unsafe bool IsPowerOn {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.ble']/class[@name='AbstractEpsonBleIoChip']/method[@name='isPowerOn' and count(parameter)=0]"
			[Register ("isPowerOn", "()Z", "GetIsPowerOnHandler")]
			get {
				const string __id = "isPowerOn.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		static Delegate? cb_close;
#pragma warning disable 0169
		static Delegate GetCloseHandler ()
		{
			if (cb_close == null)
				cb_close = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_Close));
			return cb_close;
		}

		static bool n_Close (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Ble.AbstractEpsonBleIoChip> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.Close ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.ble']/class[@name='AbstractEpsonBleIoChip']/method[@name='close' and count(parameter)=0]"
		[Register ("close", "()Z", "GetCloseHandler")]
		public virtual unsafe bool Close ()
		{
			const string __id = "close.()Z";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		static Delegate? cb_open_Landroid_content_Context_Ljava_lang_String_I;
#pragma warning disable 0169
		static Delegate GetOpen_Landroid_content_Context_Ljava_lang_String_IHandler ()
		{
			if (cb_open_Landroid_content_Context_Ljava_lang_String_I == null)
				cb_open_Landroid_content_Context_Ljava_lang_String_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLLI_I (n_Open_Landroid_content_Context_Ljava_lang_String_I));
			return cb_open_Landroid_content_Context_Ljava_lang_String_I;
		}

		static int n_Open_Landroid_content_Context_Ljava_lang_String_I (IntPtr jnienv, IntPtr native__this, IntPtr native_context, IntPtr native_deviceAddress, int timeoutMillis)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Ble.AbstractEpsonBleIoChip> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var context = global::Java.Lang.Object.GetObject<global::Android.Content.Context> (native_context, JniHandleOwnership.DoNotTransfer);
			var deviceAddress = JNIEnv.GetString (native_deviceAddress, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.Open (context, deviceAddress, timeoutMillis);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.ble']/class[@name='AbstractEpsonBleIoChip']/method[@name='open' and count(parameter)=3 and parameter[1][@type='android.content.Context'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int']]"
		[Register ("open", "(Landroid/content/Context;Ljava/lang/String;I)I", "GetOpen_Landroid_content_Context_Ljava_lang_String_IHandler")]
		public virtual unsafe int Open (global::Android.Content.Context? context, string? deviceAddress, int timeoutMillis)
		{
			const string __id = "open.(Landroid/content/Context;Ljava/lang/String;I)I";
			IntPtr native_deviceAddress = JNIEnv.NewString ((string?)deviceAddress);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				__args [1] = new JniArgumentValue (native_deviceAddress);
				__args [2] = new JniArgumentValue (timeoutMillis);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_deviceAddress);
				global::System.GC.KeepAlive (context);
			}
		}

		static Delegate? cb_read_arrayBIIIarrayI;
#pragma warning disable 0169
		static Delegate GetRead_arrayBIIIarrayIHandler ()
		{
			if (cb_read_arrayBIIIarrayI == null)
				cb_read_arrayBIIIarrayI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIIIL_I (n_Read_arrayBIIIarrayI));
			return cb_read_arrayBIIIarrayI;
		}

		static int n_Read_arrayBIIIarrayI (IntPtr jnienv, IntPtr native__this, IntPtr native_data, int offset, int readDataSize, int timeoutMillis, IntPtr native_readDataSizeActual)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Ble.AbstractEpsonBleIoChip> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = (byte[]?) JNIEnv.GetArray (native_data, JniHandleOwnership.DoNotTransfer, typeof (byte));
			var readDataSizeActual = (int[]?) JNIEnv.GetArray (native_readDataSizeActual, JniHandleOwnership.DoNotTransfer, typeof (int));
			int __ret = __this.Read (data, offset, readDataSize, timeoutMillis, readDataSizeActual);
			if (data != null)
				JNIEnv.CopyArray (data, native_data);
			if (readDataSizeActual != null)
				JNIEnv.CopyArray (readDataSizeActual, native_readDataSizeActual);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.ble']/class[@name='AbstractEpsonBleIoChip']/method[@name='read' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int[]']]"
		[Register ("read", "([BIII[I)I", "GetRead_arrayBIIIarrayIHandler")]
		public virtual unsafe int Read (byte[]? data, int offset, int readDataSize, int timeoutMillis, int[]? readDataSizeActual)
		{
			const string __id = "read.([BIII[I)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_readDataSizeActual = JNIEnv.NewArray (readDataSizeActual);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (readDataSize);
				__args [3] = new JniArgumentValue (timeoutMillis);
				__args [4] = new JniArgumentValue (native_readDataSizeActual);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (readDataSizeActual != null) {
					JNIEnv.CopyArray (native_readDataSizeActual, readDataSizeActual);
					JNIEnv.DeleteLocalRef (native_readDataSizeActual);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (readDataSizeActual);
			}
		}

		static Delegate? cb_write_arrayBIIIarrayI;
#pragma warning disable 0169
		static Delegate GetWrite_arrayBIIIarrayIHandler ()
		{
			if (cb_write_arrayBIIIarrayI == null)
				cb_write_arrayBIIIarrayI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIIIL_I (n_Write_arrayBIIIarrayI));
			return cb_write_arrayBIIIarrayI;
		}

		static int n_Write_arrayBIIIarrayI (IntPtr jnienv, IntPtr native__this, IntPtr native_data, int offset, int writeDataSize, int timeoutMillis, IntPtr native_writtenDataSize)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Ble.AbstractEpsonBleIoChip> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = (byte[]?) JNIEnv.GetArray (native_data, JniHandleOwnership.DoNotTransfer, typeof (byte));
			var writtenDataSize = (int[]?) JNIEnv.GetArray (native_writtenDataSize, JniHandleOwnership.DoNotTransfer, typeof (int));
			int __ret = __this.Write (data, offset, writeDataSize, timeoutMillis, writtenDataSize);
			if (data != null)
				JNIEnv.CopyArray (data, native_data);
			if (writtenDataSize != null)
				JNIEnv.CopyArray (writtenDataSize, native_writtenDataSize);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.ble']/class[@name='AbstractEpsonBleIoChip']/method[@name='write' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int[]']]"
		[Register ("write", "([BIII[I)I", "GetWrite_arrayBIIIarrayIHandler")]
		public virtual unsafe int Write (byte[]? data, int offset, int writeDataSize, int timeoutMillis, int[]? writtenDataSize)
		{
			const string __id = "write.([BIII[I)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_writtenDataSize = JNIEnv.NewArray (writtenDataSize);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (writeDataSize);
				__args [3] = new JniArgumentValue (timeoutMillis);
				__args [4] = new JniArgumentValue (native_writtenDataSize);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (writtenDataSize != null) {
					JNIEnv.CopyArray (native_writtenDataSize, writtenDataSize);
					JNIEnv.DeleteLocalRef (native_writtenDataSize);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (writtenDataSize);
			}
		}

	}

	[global::Android.Runtime.Register ("com/epson/epsonio/ble/AbstractEpsonBleIoChip", DoNotGenerateAcw=true)]
	internal partial class AbstractEpsonBleIoChipInvoker : AbstractEpsonBleIoChip {
		public AbstractEpsonBleIoChipInvoker (IntPtr handle, JniHandleOwnership transfer) : base (handle, transfer)
		{
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/epsonio/ble/AbstractEpsonBleIoChip", typeof (AbstractEpsonBleIoChipInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

	}
}
