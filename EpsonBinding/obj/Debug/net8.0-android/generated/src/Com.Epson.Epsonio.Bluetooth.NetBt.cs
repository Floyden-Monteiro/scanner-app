//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Epson.Epsonio.Bluetooth {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.epson.epsonio.bluetooth']/class[@name='NetBt']"
	[global::Android.Runtime.Register ("com/epson/epsonio/bluetooth/NetBt", DoNotGenerateAcw=true)]
	public partial class NetBt : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/epsonio/bluetooth/NetBt", typeof (NetBt));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected NetBt (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.epsonio.bluetooth']/class[@name='NetBt']/constructor[@name='NetBt' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe NetBt () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.bluetooth']/class[@name='NetBt']/method[@name='close' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("close", "(I)I", "")]
		public static unsafe int Close (int btHandle)
		{
			const string __id = "close.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (btHandle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.bluetooth']/class[@name='NetBt']/method[@name='kill' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("kill", "(I)I", "")]
		public static unsafe int Kill (int btHandle)
		{
			const string __id = "kill.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (btHandle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.bluetooth']/class[@name='NetBt']/method[@name='open' and count(parameter)=4 and parameter[1][@type='android.content.Context'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='int[]']]"
		[Register ("open", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;[I)I", "")]
		public static unsafe int Open (global::Android.Content.Context? caller, string? deviceName, string? deviceSettings, int[]? btHandle)
		{
			const string __id = "open.(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;[I)I";
			IntPtr native_deviceName = JNIEnv.NewString ((string?)deviceName);
			IntPtr native_deviceSettings = JNIEnv.NewString ((string?)deviceSettings);
			IntPtr native_btHandle = JNIEnv.NewArray (btHandle);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((caller == null) ? IntPtr.Zero : ((global::Java.Lang.Object) caller).Handle);
				__args [1] = new JniArgumentValue (native_deviceName);
				__args [2] = new JniArgumentValue (native_deviceSettings);
				__args [3] = new JniArgumentValue (native_btHandle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_deviceName);
				JNIEnv.DeleteLocalRef (native_deviceSettings);
				if (btHandle != null) {
					JNIEnv.CopyArray (native_btHandle, btHandle);
					JNIEnv.DeleteLocalRef (native_btHandle);
				}
				global::System.GC.KeepAlive (caller);
				global::System.GC.KeepAlive (btHandle);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.bluetooth']/class[@name='NetBt']/method[@name='read' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int[]']]"
		[Register ("read", "(I[BIII[I)I", "")]
		public static unsafe int Read (int btHandle, byte[]? data, int offset, int dataSize, int timelimit, int[]? readSize)
		{
			const string __id = "read.(I[BIII[I)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_readSize = JNIEnv.NewArray (readSize);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (btHandle);
				__args [1] = new JniArgumentValue (native_data);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (dataSize);
				__args [4] = new JniArgumentValue (timelimit);
				__args [5] = new JniArgumentValue (native_readSize);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (readSize != null) {
					JNIEnv.CopyArray (native_readSize, readSize);
					JNIEnv.DeleteLocalRef (native_readSize);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (readSize);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.bluetooth']/class[@name='NetBt']/method[@name='write' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int[]']]"
		[Register ("write", "(I[BIII[I)I", "")]
		public static unsafe int Write (int btHandle, byte[]? data, int offset, int dataSize, int timelimit, int[]? sentSize)
		{
			const string __id = "write.(I[BIII[I)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_sentSize = JNIEnv.NewArray (sentSize);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (btHandle);
				__args [1] = new JniArgumentValue (native_data);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (dataSize);
				__args [4] = new JniArgumentValue (timelimit);
				__args [5] = new JniArgumentValue (native_sentSize);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (sentSize != null) {
					JNIEnv.CopyArray (native_sentSize, sentSize);
					JNIEnv.DeleteLocalRef (native_sentSize);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (sentSize);
			}
		}

	}
}
