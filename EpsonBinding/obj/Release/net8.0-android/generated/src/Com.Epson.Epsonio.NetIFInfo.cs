//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Epson.Epsonio {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.epson.epsonio']/class[@name='NetIFInfo']"
	[global::Android.Runtime.Register ("com/epson/epsonio/NetIFInfo", DoNotGenerateAcw=true)]
	public partial class NetIFInfo : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/epsonio/NetIFInfo", typeof (NetIFInfo));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected NetIFInfo (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.epsonio']/class[@name='NetIFInfo']/constructor[@name='NetIFInfo' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe NetIFInfo () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio']/class[@name='NetIFInfo']/method[@name='createNetworkInterfaceArray' and count(parameter)=2 and parameter[1][@type='java.net.NetworkInterface[]'] and parameter[2][@type='int']]"
		[Register ("createNetworkInterfaceArray", "([Ljava/net/NetworkInterface;I)I", "")]
		public static unsafe int CreateNetworkInterfaceArray (global::Java.Net.NetworkInterface[]? networkIf, int networkIfCount)
		{
			const string __id = "createNetworkInterfaceArray.([Ljava/net/NetworkInterface;I)I";
			IntPtr native_networkIf = JNIEnv.NewArray (networkIf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_networkIf);
				__args [1] = new JniArgumentValue (networkIfCount);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (networkIf != null) {
					JNIEnv.CopyArray (native_networkIf, networkIf);
					JNIEnv.DeleteLocalRef (native_networkIf);
				}
				global::System.GC.KeepAlive (networkIf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio']/class[@name='NetIFInfo']/method[@name='getMyAddress' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register ("getMyAddress", "(Ljava/lang/String;I)Ljava/lang/String;", "")]
		public static unsafe string? GetMyAddress (string? interfaceName, int infoType)
		{
			const string __id = "getMyAddress.(Ljava/lang/String;I)Ljava/lang/String;";
			IntPtr native_interfaceName = JNIEnv.NewString ((string?)interfaceName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_interfaceName);
				__args [1] = new JniArgumentValue (infoType);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_interfaceName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio']/class[@name='NetIFInfo']/method[@name='getNetInfoList' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("getNetInfoList", "(I)[Lcom/epson/epsonio/NetIfResult;", "")]
		public static unsafe global::Com.Epson.Epsonio.NetIfResult[]? GetNetInfoList (int netIfNum)
		{
			const string __id = "getNetInfoList.(I)[Lcom/epson/epsonio/NetIfResult;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (netIfNum);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Com.Epson.Epsonio.NetIfResult[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Com.Epson.Epsonio.NetIfResult));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio']/class[@name='NetIFInfo']/method[@name='getNetInfoNum' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("getNetInfoNum", "([I)I", "")]
		public static unsafe int GetNetInfoNum (int[]? netIfNum)
		{
			const string __id = "getNetInfoNum.([I)I";
			IntPtr native_netIfNum = JNIEnv.NewArray (netIfNum);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_netIfNum);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (netIfNum != null) {
					JNIEnv.CopyArray (native_netIfNum, netIfNum);
					JNIEnv.DeleteLocalRef (native_netIfNum);
				}
				global::System.GC.KeepAlive (netIfNum);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio']/class[@name='NetIFInfo']/method[@name='getNetworkInterfaceName' and count(parameter)=1 and parameter[1][@type='java.net.NetworkInterface']]"
		[Register ("getNetworkInterfaceName", "(Ljava/net/NetworkInterface;)Ljava/lang/String;", "")]
		public static unsafe string? GetNetworkInterfaceName (global::Java.Net.NetworkInterface? networkIf)
		{
			const string __id = "getNetworkInterfaceName.(Ljava/net/NetworkInterface;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((networkIf == null) ? IntPtr.Zero : ((global::Java.Lang.Object) networkIf).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (networkIf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio']/class[@name='NetIFInfo']/method[@name='getTargetSmartDeviceNetIfNum' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("getTargetSmartDeviceNetIfNum", "([I)I", "")]
		public static unsafe int GetTargetSmartDeviceNetIfNum (int[]? targetCount)
		{
			const string __id = "getTargetSmartDeviceNetIfNum.([I)I";
			IntPtr native_targetCount = JNIEnv.NewArray (targetCount);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_targetCount);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (targetCount != null) {
					JNIEnv.CopyArray (native_targetCount, targetCount);
					JNIEnv.DeleteLocalRef (native_targetCount);
				}
				global::System.GC.KeepAlive (targetCount);
			}
		}

	}
}
