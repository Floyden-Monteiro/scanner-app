//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Epson.Epsonio.Usb {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='StreamReadThread']"
	[global::Android.Runtime.Register ("com/epson/epsonio/usb/StreamReadThread", DoNotGenerateAcw=true)]
	public partial class StreamReadThread : global::Java.Lang.Thread {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/epsonio/usb/StreamReadThread", typeof (StreamReadThread));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected StreamReadThread (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='StreamReadThread']/constructor[@name='StreamReadThread' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe StreamReadThread () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_read_arrayBII;
#pragma warning disable 0169
		static Delegate GetRead_arrayBIIHandler ()
		{
			if (cb_read_arrayBII == null)
				cb_read_arrayBII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLII_I (n_Read_arrayBII));
			return cb_read_arrayBII;
		}

		static int n_Read_arrayBII (IntPtr jnienv, IntPtr native__this, IntPtr native_data, int offset, int size)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.StreamReadThread> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = (byte[]?) JNIEnv.GetArray (native_data, JniHandleOwnership.DoNotTransfer, typeof (byte));
			int __ret = __this.Read (data, offset, size);
			if (data != null)
				JNIEnv.CopyArray (data, native_data);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='StreamReadThread']/method[@name='read' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("read", "([BII)I", "GetRead_arrayBIIHandler")]
		public virtual unsafe int Read (byte[]? data, int offset, int size)
		{
			const string __id = "read.([BII)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (size);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		static Delegate? cb_startThread_Ljava_io_FileDescriptor_;
#pragma warning disable 0169
		static Delegate GetStartThread_Ljava_io_FileDescriptor_Handler ()
		{
			if (cb_startThread_Ljava_io_FileDescriptor_ == null)
				cb_startThread_Ljava_io_FileDescriptor_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_StartThread_Ljava_io_FileDescriptor_));
			return cb_startThread_Ljava_io_FileDescriptor_;
		}

		static void n_StartThread_Ljava_io_FileDescriptor_ (IntPtr jnienv, IntPtr native__this, IntPtr native_fd)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.StreamReadThread> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var fd = global::Java.Lang.Object.GetObject<global::Java.IO.FileDescriptor> (native_fd, JniHandleOwnership.DoNotTransfer);
			__this.StartThread (fd);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='StreamReadThread']/method[@name='startThread' and count(parameter)=1 and parameter[1][@type='java.io.FileDescriptor']]"
		[Register ("startThread", "(Ljava/io/FileDescriptor;)V", "GetStartThread_Ljava_io_FileDescriptor_Handler")]
		public virtual unsafe void StartThread (global::Java.IO.FileDescriptor? fd)
		{
			const string __id = "startThread.(Ljava/io/FileDescriptor;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((fd == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fd).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (fd);
			}
		}

		static Delegate? cb_stopThread;
#pragma warning disable 0169
		static Delegate GetStopThreadHandler ()
		{
			if (cb_stopThread == null)
				cb_stopThread = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_StopThread));
			return cb_stopThread;
		}

		static void n_StopThread (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.StreamReadThread> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.StopThread ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='StreamReadThread']/method[@name='stopThread' and count(parameter)=0]"
		[Register ("stopThread", "()V", "GetStopThreadHandler")]
		public virtual unsafe void StopThread ()
		{
			const string __id = "stopThread.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

	}
}
