//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Epson.Epos2.Discovery {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']"
	[global::Android.Runtime.Register ("com/epson/epos2/discovery/Discovery", DoNotGenerateAcw=true)]
	public partial class Discovery : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='FALSE']"
		[Register ("FALSE")]
		public const int False = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='FILTER_NAME']"
		[Register ("FILTER_NAME")]
		public const int FilterName = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='FILTER_NONE']"
		[Register ("FILTER_NONE")]
		public const int FilterNone = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='MODEL_ALL']"
		[Register ("MODEL_ALL")]
		public const int ModelAll = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='PORTTYPE_ALL']"
		[Register ("PORTTYPE_ALL")]
		public const int PorttypeAll = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='PORTTYPE_BLUETOOTH']"
		[Register ("PORTTYPE_BLUETOOTH")]
		public const int PorttypeBluetooth = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='PORTTYPE_BLUETOOTH_LE']"
		[Register ("PORTTYPE_BLUETOOTH_LE")]
		public const int PorttypeBluetoothLe = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='PORTTYPE_TCP']"
		[Register ("PORTTYPE_TCP")]
		public const int PorttypeTcp = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='PORTTYPE_USB']"
		[Register ("PORTTYPE_USB")]
		public const int PorttypeUsb = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TRUE']"
		[Register ("TRUE")]
		public const int True = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_ALL']"
		[Register ("TYPE_ALL")]
		public const int TypeAll = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_CAT']"
		[Register ("TYPE_CAT")]
		public const int TypeCat = (int) 9;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_CCHANGER']"
		[Register ("TYPE_CCHANGER")]
		public const int TypeCchanger = (int) 7;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_DISPLAY']"
		[Register ("TYPE_DISPLAY")]
		public const int TypeDisplay = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_GFE']"
		[Register ("TYPE_GFE")]
		public const int TypeGfe = (int) 12;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_HYBRID_PRINTER']"
		[Register ("TYPE_HYBRID_PRINTER")]
		public const int TypeHybridPrinter = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_KEYBOARD']"
		[Register ("TYPE_KEYBOARD")]
		public const int TypeKeyboard = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_MSR']"
		[Register ("TYPE_MSR")]
		public const int TypeMsr = (int) 10;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_OTHER_PERIPHERAL']"
		[Register ("TYPE_OTHER_PERIPHERAL")]
		public const int TypeOtherPeripheral = (int) 11;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_POS_KEYBOARD']"
		[Register ("TYPE_POS_KEYBOARD")]
		public const int TypePosKeyboard = (int) 8;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_PRINTER']"
		[Register ("TYPE_PRINTER")]
		public const int TypePrinter = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_SCANNER']"
		[Register ("TYPE_SCANNER")]
		public const int TypeScanner = (int) 5;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/field[@name='TYPE_SERIAL']"
		[Register ("TYPE_SERIAL")]
		public const int TypeSerial = (int) 6;

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/epos2/discovery/Discovery", typeof (Discovery));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Discovery (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/constructor[@name='Discovery' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe Discovery () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/method[@name='onDiscovery' and count(parameter)=1 and parameter[1][@type='com.epson.epos2.discovery.DeviceInfo']]"
		[Register ("onDiscovery", "(Lcom/epson/epos2/discovery/DeviceInfo;)V", "")]
		protected static unsafe void OnDiscovery (global::Com.Epson.Epos2.Discovery.DeviceInfo? deviceInfo)
		{
			const string __id = "onDiscovery.(Lcom/epson/epos2/discovery/DeviceInfo;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((deviceInfo == null) ? IntPtr.Zero : ((global::Java.Lang.Object) deviceInfo).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (deviceInfo);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/method[@name='start' and count(parameter)=3 and parameter[1][@type='android.content.Context'] and parameter[2][@type='com.epson.epos2.discovery.FilterOption'] and parameter[3][@type='com.epson.epos2.discovery.DiscoveryListener']]"
		[Register ("start", "(Landroid/content/Context;Lcom/epson/epos2/discovery/FilterOption;Lcom/epson/epos2/discovery/DiscoveryListener;)V", "")]
		public static unsafe void Start (global::Android.Content.Context? context, global::Com.Epson.Epos2.Discovery.FilterOption? filterOption, global::Com.Epson.Epos2.Discovery.IDiscoveryListener? listener)
		{
			const string __id = "start.(Landroid/content/Context;Lcom/epson/epos2/discovery/FilterOption;Lcom/epson/epos2/discovery/DiscoveryListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				__args [1] = new JniArgumentValue ((filterOption == null) ? IntPtr.Zero : ((global::Java.Lang.Object) filterOption).Handle);
				__args [2] = new JniArgumentValue ((listener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listener).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (context);
				global::System.GC.KeepAlive (filterOption);
				global::System.GC.KeepAlive (listener);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epos2.discovery']/class[@name='Discovery']/method[@name='stop' and count(parameter)=0]"
		[Register ("stop", "()V", "")]
		public static unsafe void Stop ()
		{
			const string __id = "stop.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

	}
}
