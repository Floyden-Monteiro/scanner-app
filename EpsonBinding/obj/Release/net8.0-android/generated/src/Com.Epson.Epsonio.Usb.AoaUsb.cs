//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Epson.Epsonio.Usb {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']"
	[global::Android.Runtime.Register ("com/epson/epsonio/usb/AoaUsb", DoNotGenerateAcw=true)]
	public partial class AoaUsb : global::Com.Epson.Epsonio.Usb.Usb {
		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/field[@name='M_MAX_A0A_SENT_SIZE_AT_ONCE']"
		[Register ("M_MAX_A0A_SENT_SIZE_AT_ONCE")]
		protected const int MMaxA0aSentSizeAtOnce = (int) 16384;

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/epsonio/usb/AoaUsb", typeof (AoaUsb));

		internal static new IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected AoaUsb (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/constructor[@name='AoaUsb' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe AoaUsb () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		public override unsafe bool IsPowerOn {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='isPowerOn' and count(parameter)=0]"
			[Register ("isPowerOn", "()Z", "")]
			get {
				const string __id = "isPowerOn.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe int UsbType {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='getUsbType' and count(parameter)=0]"
			[Register ("getUsbType", "()I", "")]
			get {
				const string __id = "getUsbType.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='checkDevice' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("checkDevice", "(Ljava/lang/String;)Z", "")]
		public override sealed unsafe bool CheckDevice (string? deviceName)
		{
			const string __id = "checkDevice.(Ljava/lang/String;)Z";
			IntPtr native_deviceName = JNIEnv.NewString ((string?)deviceName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_deviceName);
				var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_deviceName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='close' and count(parameter)=0]"
		[Register ("close", "()I", "")]
		public override sealed unsafe int Close ()
		{
			const string __id = "close.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='enableFlowControl' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("enableFlowControl", "(I)I", "")]
		public override sealed unsafe int EnableFlowControl (int enable)
		{
			const string __id = "enableFlowControl.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (enable);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='getDeviceName' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("getDeviceName", "(Ljava/lang/Object;)Ljava/lang/String;", "")]
		public static unsafe string? GetDeviceName (global::Java.Lang.Object? context)
		{
			const string __id = "getDeviceName.(Ljava/lang/Object;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (context);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='getOnlineDMStatus' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("getOnlineDMStatus", "([I)I", "")]
		public override sealed unsafe int GetOnlineDMStatus (int[]? onlineStatus)
		{
			const string __id = "getOnlineDMStatus.([I)I";
			IntPtr native_onlineStatus = JNIEnv.NewArray (onlineStatus);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_onlineStatus);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (onlineStatus != null) {
					JNIEnv.CopyArray (native_onlineStatus, onlineStatus);
					JNIEnv.DeleteLocalRef (native_onlineStatus);
				}
				global::System.GC.KeepAlive (onlineStatus);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='getOnlineTMStatus' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("getOnlineTMStatus", "([I)I", "")]
		public override sealed unsafe int GetOnlineTMStatus (int[]? onlineStatus)
		{
			const string __id = "getOnlineTMStatus.([I)I";
			IntPtr native_onlineStatus = JNIEnv.NewArray (onlineStatus);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_onlineStatus);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (onlineStatus != null) {
					JNIEnv.CopyArray (native_onlineStatus, onlineStatus);
					JNIEnv.DeleteLocalRef (native_onlineStatus);
				}
				global::System.GC.KeepAlive (onlineStatus);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='isConnection' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("isConnection", "(Ljava/lang/Object;)Z", "")]
		public static unsafe bool IsConnection (global::Java.Lang.Object? context)
		{
			const string __id = "isConnection.(Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (context);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='open' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.Object']]"
		[Register ("open", "(ILjava/lang/Object;)I", "")]
		public override sealed unsafe int Open (int handle, global::Java.Lang.Object? context)
		{
			const string __id = "open.(ILjava/lang/Object;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (handle);
				__args [1] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (context);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='read' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int[]'] and parameter[5][@type='int[]']]"
		[Register ("read", "([BII[I[I)I", "")]
		public override sealed unsafe int Read (byte[]? data, int offset, int dataSize, int[]? timelimit, int[]? readSize)
		{
			const string __id = "read.([BII[I[I)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_timelimit = JNIEnv.NewArray (timelimit);
			IntPtr native_readSize = JNIEnv.NewArray (readSize);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (dataSize);
				__args [3] = new JniArgumentValue (native_timelimit);
				__args [4] = new JniArgumentValue (native_readSize);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (timelimit != null) {
					JNIEnv.CopyArray (native_timelimit, timelimit);
					JNIEnv.DeleteLocalRef (native_timelimit);
				}
				if (readSize != null) {
					JNIEnv.CopyArray (native_readSize, readSize);
					JNIEnv.DeleteLocalRef (native_readSize);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (timelimit);
				global::System.GC.KeepAlive (readSize);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='requestPermission' and count(parameter)=3 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int[]']]"
		[Register ("requestPermission", "(Ljava/lang/Object;Ljava/lang/String;[I)I", "")]
		public override sealed unsafe int RequestPermission (global::Java.Lang.Object? context, string? deviceName, int[]? timeout)
		{
			const string __id = "requestPermission.(Ljava/lang/Object;Ljava/lang/String;[I)I";
			IntPtr native_deviceName = JNIEnv.NewString ((string?)deviceName);
			IntPtr native_timeout = JNIEnv.NewArray (timeout);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				__args [1] = new JniArgumentValue (native_deviceName);
				__args [2] = new JniArgumentValue (native_timeout);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_deviceName);
				if (timeout != null) {
					JNIEnv.CopyArray (native_timeout, timeout);
					JNIEnv.DeleteLocalRef (native_timeout);
				}
				global::System.GC.KeepAlive (context);
				global::System.GC.KeepAlive (timeout);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='AoaUsb']/method[@name='write' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int[]'] and parameter[5][@type='int[]']]"
		[Register ("write", "([BII[I[I)I", "")]
		public override sealed unsafe int Write (byte[]? data, int offset, int dataSize, int[]? timelimit, int[]? sentSize)
		{
			const string __id = "write.([BII[I[I)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_timelimit = JNIEnv.NewArray (timelimit);
			IntPtr native_sentSize = JNIEnv.NewArray (sentSize);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (dataSize);
				__args [3] = new JniArgumentValue (native_timelimit);
				__args [4] = new JniArgumentValue (native_sentSize);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (timelimit != null) {
					JNIEnv.CopyArray (native_timelimit, timelimit);
					JNIEnv.DeleteLocalRef (native_timelimit);
				}
				if (sentSize != null) {
					JNIEnv.CopyArray (native_sentSize, sentSize);
					JNIEnv.DeleteLocalRef (native_sentSize);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (timelimit);
				global::System.GC.KeepAlive (sentSize);
			}
		}

	}
}
