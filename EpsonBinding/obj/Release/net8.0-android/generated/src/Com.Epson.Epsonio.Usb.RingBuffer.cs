//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Epson.Epsonio.Usb {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='RingBuffer']"
	[global::Android.Runtime.Register ("com/epson/epsonio/usb/RingBuffer", DoNotGenerateAcw=true)]
	public partial class RingBuffer : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/epsonio/usb/RingBuffer", typeof (RingBuffer));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected RingBuffer (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='RingBuffer']/constructor[@name='RingBuffer' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe RingBuffer () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='RingBuffer']/constructor[@name='RingBuffer' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register (".ctor", "(I)V", "")]
		public unsafe RingBuffer (int size) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(I)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (size);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_getReadableDataSize;
#pragma warning disable 0169
		static Delegate GetGetReadableDataSizeHandler ()
		{
			if (cb_getReadableDataSize == null)
				cb_getReadableDataSize = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_GetReadableDataSize));
			return cb_getReadableDataSize;
		}

		static int n_GetReadableDataSize (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.RingBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.ReadableDataSize;
		}
#pragma warning restore 0169

		public virtual unsafe int ReadableDataSize {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='RingBuffer']/method[@name='getReadableDataSize' and count(parameter)=0]"
			[Register ("getReadableDataSize", "()I", "GetGetReadableDataSizeHandler")]
			get {
				const string __id = "getReadableDataSize.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		static Delegate? cb_dequeue_arrayBII;
#pragma warning disable 0169
		static Delegate GetDequeue_arrayBIIHandler ()
		{
			if (cb_dequeue_arrayBII == null)
				cb_dequeue_arrayBII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLII_I (n_Dequeue_arrayBII));
			return cb_dequeue_arrayBII;
		}

		static int n_Dequeue_arrayBII (IntPtr jnienv, IntPtr native__this, IntPtr native_value, int offset, int valueSize)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.RingBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var value = (byte[]?) JNIEnv.GetArray (native_value, JniHandleOwnership.DoNotTransfer, typeof (byte));
			int __ret = __this.Dequeue (value, offset, valueSize);
			if (value != null)
				JNIEnv.CopyArray (value, native_value);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='RingBuffer']/method[@name='dequeue' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("dequeue", "([BII)I", "GetDequeue_arrayBIIHandler")]
		public virtual unsafe int Dequeue (byte[]? value, int offset, int valueSize)
		{
			const string __id = "dequeue.([BII)I";
			IntPtr native_value = JNIEnv.NewArray (value);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_value);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (valueSize);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (value != null) {
					JNIEnv.CopyArray (native_value, value);
					JNIEnv.DeleteLocalRef (native_value);
				}
				global::System.GC.KeepAlive (value);
			}
		}

		static Delegate? cb_enqueue_arrayBII;
#pragma warning disable 0169
		static Delegate GetEnqueue_arrayBIIHandler ()
		{
			if (cb_enqueue_arrayBII == null)
				cb_enqueue_arrayBII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLII_V (n_Enqueue_arrayBII));
			return cb_enqueue_arrayBII;
		}

		static void n_Enqueue_arrayBII (IntPtr jnienv, IntPtr native__this, IntPtr native_value, int offset, int valueSize)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Epsonio.Usb.RingBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var value = (byte[]?) JNIEnv.GetArray (native_value, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.Enqueue (value, offset, valueSize);
			if (value != null)
				JNIEnv.CopyArray (value, native_value);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.epsonio.usb']/class[@name='RingBuffer']/method[@name='enqueue' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("enqueue", "([BII)V", "GetEnqueue_arrayBIIHandler")]
		public virtual unsafe void Enqueue (byte[]? value, int offset, int valueSize)
		{
			const string __id = "enqueue.([BII)V";
			IntPtr native_value = JNIEnv.NewArray (value);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_value);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (valueSize);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (value != null) {
					JNIEnv.CopyArray (native_value, value);
					JNIEnv.DeleteLocalRef (native_value);
				}
				global::System.GC.KeepAlive (value);
			}
		}

	}
}
