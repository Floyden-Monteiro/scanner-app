//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Epson.Eposprint {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']"
	[global::Android.Runtime.Register ("com/epson/eposprint/Builder", DoNotGenerateAcw=true)]
	public partial class Builder : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='ALIGN_CENTER']"
		[Register ("ALIGN_CENTER")]
		public const int AlignCenter = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='ALIGN_LEFT']"
		[Register ("ALIGN_LEFT")]
		public const int AlignLeft = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='ALIGN_RIGHT']"
		[Register ("ALIGN_RIGHT")]
		public const int AlignRight = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_CODABAR']"
		[Register ("BARCODE_CODABAR")]
		public const int BarcodeCodabar = (int) 8;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_CODE128']"
		[Register ("BARCODE_CODE128")]
		public const int BarcodeCode128 = (int) 10;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_CODE39']"
		[Register ("BARCODE_CODE39")]
		public const int BarcodeCode39 = (int) 6;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_CODE93']"
		[Register ("BARCODE_CODE93")]
		public const int BarcodeCode93 = (int) 9;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_EAN13']"
		[Register ("BARCODE_EAN13")]
		public const int BarcodeEan13 = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_EAN8']"
		[Register ("BARCODE_EAN8")]
		public const int BarcodeEan8 = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_GS1_128']"
		[Register ("BARCODE_GS1_128")]
		public const int BarcodeGs1128 = (int) 11;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_GS1_DATABAR_EXPANDED']"
		[Register ("BARCODE_GS1_DATABAR_EXPANDED")]
		public const int BarcodeGs1DatabarExpanded = (int) 15;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_GS1_DATABAR_LIMITED']"
		[Register ("BARCODE_GS1_DATABAR_LIMITED")]
		public const int BarcodeGs1DatabarLimited = (int) 14;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_GS1_DATABAR_OMNIDIRECTIONAL']"
		[Register ("BARCODE_GS1_DATABAR_OMNIDIRECTIONAL")]
		public const int BarcodeGs1DatabarOmnidirectional = (int) 12;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_GS1_DATABAR_TRUNCATED']"
		[Register ("BARCODE_GS1_DATABAR_TRUNCATED")]
		public const int BarcodeGs1DatabarTruncated = (int) 13;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_ITF']"
		[Register ("BARCODE_ITF")]
		public const int BarcodeItf = (int) 7;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_JAN13']"
		[Register ("BARCODE_JAN13")]
		public const int BarcodeJan13 = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_JAN8']"
		[Register ("BARCODE_JAN8")]
		public const int BarcodeJan8 = (int) 5;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_UPC_A']"
		[Register ("BARCODE_UPC_A")]
		public const int BarcodeUpcA = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='BARCODE_UPC_E']"
		[Register ("BARCODE_UPC_E")]
		public const int BarcodeUpcE = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='COLOR_1']"
		[Register ("COLOR_1")]
		public const int Color1 = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='COLOR_2']"
		[Register ("COLOR_2")]
		public const int Color2 = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='COLOR_3']"
		[Register ("COLOR_3")]
		public const int Color3 = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='COLOR_4']"
		[Register ("COLOR_4")]
		public const int Color4 = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='COLOR_NONE']"
		[Register ("COLOR_NONE")]
		public const int ColorNone = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='COMPRESS_DEFLATE']"
		[Register ("COMPRESS_DEFLATE")]
		public const int CompressDeflate = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='COMPRESS_NONE']"
		[Register ("COMPRESS_NONE")]
		public const int CompressNone = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='CUT_FEED']"
		[Register ("CUT_FEED")]
		public const int CutFeed = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='CUT_NO_FEED']"
		[Register ("CUT_NO_FEED")]
		public const int CutNoFeed = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='CUT_RESERVE']"
		[Register ("CUT_RESERVE")]
		public const int CutReserve = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='DIRECTION_BOTTOM_TO_TOP']"
		[Register ("DIRECTION_BOTTOM_TO_TOP")]
		public const int DirectionBottomToTop = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='DIRECTION_LEFT_TO_RIGHT']"
		[Register ("DIRECTION_LEFT_TO_RIGHT")]
		public const int DirectionLeftToRight = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='DIRECTION_RIGHT_TO_LEFT']"
		[Register ("DIRECTION_RIGHT_TO_LEFT")]
		public const int DirectionRightToLeft = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='DIRECTION_TOP_TO_BOTTOM']"
		[Register ("DIRECTION_TOP_TO_BOTTOM")]
		public const int DirectionTopToBottom = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='DRAWER_1']"
		[Register ("DRAWER_1")]
		public const int Drawer1 = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='DRAWER_2']"
		[Register ("DRAWER_2")]
		public const int Drawer2 = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='FALSE']"
		[Register ("FALSE")]
		public const int False = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='FEED_CURRENT_TOF']"
		[Register ("FEED_CURRENT_TOF")]
		public const int FeedCurrentTof = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='FEED_CUTTING']"
		[Register ("FEED_CUTTING")]
		public const int FeedCutting = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='FEED_NEXT_TOF']"
		[Register ("FEED_NEXT_TOF")]
		public const int FeedNextTof = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='FEED_PEELING']"
		[Register ("FEED_PEELING")]
		public const int FeedPeeling = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='FONT_A']"
		[Register ("FONT_A")]
		public const int FontA = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='FONT_B']"
		[Register ("FONT_B")]
		public const int FontB = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='FONT_C']"
		[Register ("FONT_C")]
		public const int FontC = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='FONT_D']"
		[Register ("FONT_D")]
		public const int FontD = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='FONT_E']"
		[Register ("FONT_E")]
		public const int FontE = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='HALFTONE_DITHER']"
		[Register ("HALFTONE_DITHER")]
		public const int HalftoneDither = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='HALFTONE_ERROR_DIFFUSION']"
		[Register ("HALFTONE_ERROR_DIFFUSION")]
		public const int HalftoneErrorDiffusion = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='HALFTONE_THRESHOLD']"
		[Register ("HALFTONE_THRESHOLD")]
		public const int HalftoneThreshold = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='HRI_ABOVE']"
		[Register ("HRI_ABOVE")]
		public const int HriAbove = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='HRI_BELOW']"
		[Register ("HRI_BELOW")]
		public const int HriBelow = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='HRI_BOTH']"
		[Register ("HRI_BOTH")]
		public const int HriBoth = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='HRI_NONE']"
		[Register ("HRI_NONE")]
		public const int HriNone = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LANG_EN']"
		[Register ("LANG_EN")]
		public const int LangEn = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LANG_JA']"
		[Register ("LANG_JA")]
		public const int LangJa = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LANG_KO']"
		[Register ("LANG_KO")]
		public const int LangKo = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LANG_TH']"
		[Register ("LANG_TH")]
		public const int LangTh = (int) 5;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LANG_VI']"
		[Register ("LANG_VI")]
		public const int LangVi = (int) 6;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LANG_ZH_CN']"
		[Register ("LANG_ZH_CN")]
		public const int LangZhCn = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LANG_ZH_TW']"
		[Register ("LANG_ZH_TW")]
		public const int LangZhTw = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LAYOUT_LABEL']"
		[Register ("LAYOUT_LABEL")]
		public const int LayoutLabel = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LAYOUT_LABEL_BM']"
		[Register ("LAYOUT_LABEL_BM")]
		public const int LayoutLabelBm = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LAYOUT_RECEIPT']"
		[Register ("LAYOUT_RECEIPT")]
		public const int LayoutReceipt = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LAYOUT_RECEIPT_BM']"
		[Register ("LAYOUT_RECEIPT_BM")]
		public const int LayoutReceiptBm = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_0']"
		[Register ("LEVEL_0")]
		public const int Level0 = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_1']"
		[Register ("LEVEL_1")]
		public const int Level1 = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_2']"
		[Register ("LEVEL_2")]
		public const int Level2 = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_3']"
		[Register ("LEVEL_3")]
		public const int Level3 = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_4']"
		[Register ("LEVEL_4")]
		public const int Level4 = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_5']"
		[Register ("LEVEL_5")]
		public const int Level5 = (int) 5;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_6']"
		[Register ("LEVEL_6")]
		public const int Level6 = (int) 6;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_7']"
		[Register ("LEVEL_7")]
		public const int Level7 = (int) 7;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_8']"
		[Register ("LEVEL_8")]
		public const int Level8 = (int) 8;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_DEFAULT']"
		[Register ("LEVEL_DEFAULT")]
		public const int LevelDefault = (int) 13;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_H']"
		[Register ("LEVEL_H")]
		public const int LevelH = (int) 12;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_L']"
		[Register ("LEVEL_L")]
		public const int LevelL = (int) 9;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_M']"
		[Register ("LEVEL_M")]
		public const int LevelM = (int) 10;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LEVEL_Q']"
		[Register ("LEVEL_Q")]
		public const int LevelQ = (int) 11;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LINE_MEDIUM']"
		[Register ("LINE_MEDIUM")]
		public const int LineMedium = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LINE_MEDIUM_DOUBLE']"
		[Register ("LINE_MEDIUM_DOUBLE")]
		public const int LineMediumDouble = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LINE_THICK']"
		[Register ("LINE_THICK")]
		public const int LineThick = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LINE_THICK_DOUBLE']"
		[Register ("LINE_THICK_DOUBLE")]
		public const int LineThickDouble = (int) 5;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LINE_THIN']"
		[Register ("LINE_THIN")]
		public const int LineThin = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='LINE_THIN_DOUBLE']"
		[Register ("LINE_THIN_DOUBLE")]
		public const int LineThinDouble = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='MODEL_ANK']"
		[Register ("MODEL_ANK")]
		public const int ModelAnk = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='MODEL_CHINESE']"
		[Register ("MODEL_CHINESE")]
		public const int ModelChinese = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='MODEL_JAPANESE']"
		[Register ("MODEL_JAPANESE")]
		public const int ModelJapanese = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='MODEL_KOREAN']"
		[Register ("MODEL_KOREAN")]
		public const int ModelKorean = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='MODEL_SOUTHASIA']"
		[Register ("MODEL_SOUTHASIA")]
		public const int ModelSouthasia = (int) 6;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='MODEL_TAIWAN']"
		[Register ("MODEL_TAIWAN")]
		public const int ModelTaiwan = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='MODEL_THAI']"
		[Register ("MODEL_THAI")]
		public const int ModelThai = (int) 5;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='MODE_GRAY16']"
		[Register ("MODE_GRAY16")]
		public const int ModeGray16 = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='MODE_MONO']"
		[Register ("MODE_MONO")]
		public const int ModeMono = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PARAM_DEFAULT']"
		[Register ("PARAM_DEFAULT")]
		public const int ParamDefault = (int) -2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PARAM_UNSPECIFIED']"
		[Register ("PARAM_UNSPECIFIED")]
		public const int ParamUnspecified = (int) -1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_1']"
		[Register ("PATTERN_1")]
		public const int Pattern1 = (int) 8;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_10']"
		[Register ("PATTERN_10")]
		public const int Pattern10 = (int) 17;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_2']"
		[Register ("PATTERN_2")]
		public const int Pattern2 = (int) 9;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_3']"
		[Register ("PATTERN_3")]
		public const int Pattern3 = (int) 10;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_4']"
		[Register ("PATTERN_4")]
		public const int Pattern4 = (int) 11;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_5']"
		[Register ("PATTERN_5")]
		public const int Pattern5 = (int) 12;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_6']"
		[Register ("PATTERN_6")]
		public const int Pattern6 = (int) 13;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_7']"
		[Register ("PATTERN_7")]
		public const int Pattern7 = (int) 14;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_8']"
		[Register ("PATTERN_8")]
		public const int Pattern8 = (int) 15;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_9']"
		[Register ("PATTERN_9")]
		public const int Pattern9 = (int) 16;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_A']"
		[Register ("PATTERN_A")]
		public const int PatternA = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_B']"
		[Register ("PATTERN_B")]
		public const int PatternB = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_C']"
		[Register ("PATTERN_C")]
		public const int PatternC = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_D']"
		[Register ("PATTERN_D")]
		public const int PatternD = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_E']"
		[Register ("PATTERN_E")]
		public const int PatternE = (int) 5;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_ERROR']"
		[Register ("PATTERN_ERROR")]
		public const int PatternError = (int) 6;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PATTERN_PAPER_END']"
		[Register ("PATTERN_PAPER_END")]
		public const int PatternPaperEnd = (int) 7;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PULSE_100']"
		[Register ("PULSE_100")]
		public const int Pulse100 = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PULSE_200']"
		[Register ("PULSE_200")]
		public const int Pulse200 = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PULSE_300']"
		[Register ("PULSE_300")]
		public const int Pulse300 = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PULSE_400']"
		[Register ("PULSE_400")]
		public const int Pulse400 = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='PULSE_500']"
		[Register ("PULSE_500")]
		public const int Pulse500 = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_AZTECCODE_COMPACT']"
		[Register ("SYMBOL_AZTECCODE_COMPACT")]
		public const int SymbolAzteccodeCompact = (int) 13;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_AZTECCODE_FULLRANGE']"
		[Register ("SYMBOL_AZTECCODE_FULLRANGE")]
		public const int SymbolAzteccodeFullrange = (int) 12;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_DATAMATRIX_RECTANGLE_12']"
		[Register ("SYMBOL_DATAMATRIX_RECTANGLE_12")]
		public const int SymbolDatamatrixRectangle12 = (int) 16;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_DATAMATRIX_RECTANGLE_16']"
		[Register ("SYMBOL_DATAMATRIX_RECTANGLE_16")]
		public const int SymbolDatamatrixRectangle16 = (int) 17;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_DATAMATRIX_RECTANGLE_8']"
		[Register ("SYMBOL_DATAMATRIX_RECTANGLE_8")]
		public const int SymbolDatamatrixRectangle8 = (int) 15;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_DATAMATRIX_SQUARE']"
		[Register ("SYMBOL_DATAMATRIX_SQUARE")]
		public const int SymbolDatamatrixSquare = (int) 14;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_GS1_DATABAR_EXPANDED_STACKED']"
		[Register ("SYMBOL_GS1_DATABAR_EXPANDED_STACKED")]
		public const int SymbolGs1DatabarExpandedStacked = (int) 11;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_GS1_DATABAR_STACKED']"
		[Register ("SYMBOL_GS1_DATABAR_STACKED")]
		public const int SymbolGs1DatabarStacked = (int) 9;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_GS1_DATABAR_STACKED_OMNIDIRECTIONAL']"
		[Register ("SYMBOL_GS1_DATABAR_STACKED_OMNIDIRECTIONAL")]
		public const int SymbolGs1DatabarStackedOmnidirectional = (int) 10;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_MAXICODE_MODE_2']"
		[Register ("SYMBOL_MAXICODE_MODE_2")]
		public const int SymbolMaxicodeMode2 = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_MAXICODE_MODE_3']"
		[Register ("SYMBOL_MAXICODE_MODE_3")]
		public const int SymbolMaxicodeMode3 = (int) 5;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_MAXICODE_MODE_4']"
		[Register ("SYMBOL_MAXICODE_MODE_4")]
		public const int SymbolMaxicodeMode4 = (int) 6;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_MAXICODE_MODE_5']"
		[Register ("SYMBOL_MAXICODE_MODE_5")]
		public const int SymbolMaxicodeMode5 = (int) 7;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_MAXICODE_MODE_6']"
		[Register ("SYMBOL_MAXICODE_MODE_6")]
		public const int SymbolMaxicodeMode6 = (int) 8;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_PDF417_STANDARD']"
		[Register ("SYMBOL_PDF417_STANDARD")]
		public const int SymbolPdf417Standard = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_PDF417_TRUNCATED']"
		[Register ("SYMBOL_PDF417_TRUNCATED")]
		public const int SymbolPdf417Truncated = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_QRCODE_MODEL_1']"
		[Register ("SYMBOL_QRCODE_MODEL_1")]
		public const int SymbolQrcodeModel1 = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='SYMBOL_QRCODE_MODEL_2']"
		[Register ("SYMBOL_QRCODE_MODEL_2")]
		public const int SymbolQrcodeModel2 = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/field[@name='TRUE']"
		[Register ("TRUE")]
		public const int True = (int) 1;

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/epson/eposprint/Builder", typeof (Builder));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Builder (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/constructor[@name='Builder' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register (".ctor", "(Ljava/lang/String;I)V", "")]
		public unsafe Builder (string? printerModel, int lang) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/lang/String;I)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_printerModel = JNIEnv.NewString ((string?)printerModel);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_printerModel);
				__args [1] = new JniArgumentValue (lang);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_printerModel);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/constructor[@name='Builder' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='android.content.Context']]"
		[Register (".ctor", "(Ljava/lang/String;ILandroid/content/Context;)V", "")]
		public unsafe Builder (string? printerModel, int lang, global::Android.Content.Context? context) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/lang/String;ILandroid/content/Context;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_printerModel = JNIEnv.NewString ((string?)printerModel);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_printerModel);
				__args [1] = new JniArgumentValue (lang);
				__args [2] = new JniArgumentValue ((context == null) ? IntPtr.Zero : ((global::Java.Lang.Object) context).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_printerModel);
				global::System.GC.KeepAlive (context);
			}
		}

		static Delegate? cb_addBarcode_Ljava_lang_String_IIIII;
#pragma warning disable 0169
		static Delegate GetAddBarcode_Ljava_lang_String_IIIIIHandler ()
		{
			if (cb_addBarcode_Ljava_lang_String_IIIII == null)
				cb_addBarcode_Ljava_lang_String_IIIII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIIIII_V (n_AddBarcode_Ljava_lang_String_IIIII));
			return cb_addBarcode_Ljava_lang_String_IIIII;
		}

		static void n_AddBarcode_Ljava_lang_String_IIIII (IntPtr jnienv, IntPtr native__this, IntPtr native_data, int type, int hri, int font, int width, int height)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = JNIEnv.GetString (native_data, JniHandleOwnership.DoNotTransfer);
			__this.AddBarcode (data, type, hri, font, width, height);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addBarcode' and count(parameter)=6 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int']]"
		[Register ("addBarcode", "(Ljava/lang/String;IIIII)V", "GetAddBarcode_Ljava_lang_String_IIIIIHandler")]
		public virtual unsafe void AddBarcode (string? data, int type, int hri, int font, int width, int height)
		{
			const string __id = "addBarcode.(Ljava/lang/String;IIIII)V";
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (type);
				__args [2] = new JniArgumentValue (hri);
				__args [3] = new JniArgumentValue (font);
				__args [4] = new JniArgumentValue (width);
				__args [5] = new JniArgumentValue (height);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_data);
			}
		}

		static Delegate? cb_addCommand_arrayB;
#pragma warning disable 0169
		static Delegate GetAddCommand_arrayBHandler ()
		{
			if (cb_addCommand_arrayB == null)
				cb_addCommand_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_AddCommand_arrayB));
			return cb_addCommand_arrayB;
		}

		static void n_AddCommand_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_data)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = (byte[]?) JNIEnv.GetArray (native_data, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.AddCommand (data);
			if (data != null)
				JNIEnv.CopyArray (data, native_data);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addCommand' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("addCommand", "([B)V", "GetAddCommand_arrayBHandler")]
		public virtual unsafe void AddCommand (byte[]? data)
		{
			const string __id = "addCommand.([B)V";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		static Delegate? cb_addCut_I;
#pragma warning disable 0169
		static Delegate GetAddCut_IHandler ()
		{
			if (cb_addCut_I == null)
				cb_addCut_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddCut_I));
			return cb_addCut_I;
		}

		static void n_AddCut_I (IntPtr jnienv, IntPtr native__this, int type)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddCut (type);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addCut' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addCut", "(I)V", "GetAddCut_IHandler")]
		public virtual unsafe void AddCut (int type)
		{
			const string __id = "addCut.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (type);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addFeedLine_I;
#pragma warning disable 0169
		static Delegate GetAddFeedLine_IHandler ()
		{
			if (cb_addFeedLine_I == null)
				cb_addFeedLine_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddFeedLine_I));
			return cb_addFeedLine_I;
		}

		static void n_AddFeedLine_I (IntPtr jnienv, IntPtr native__this, int line)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddFeedLine (line);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addFeedLine' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addFeedLine", "(I)V", "GetAddFeedLine_IHandler")]
		public virtual unsafe void AddFeedLine (int line)
		{
			const string __id = "addFeedLine.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (line);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addFeedPosition_I;
#pragma warning disable 0169
		static Delegate GetAddFeedPosition_IHandler ()
		{
			if (cb_addFeedPosition_I == null)
				cb_addFeedPosition_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddFeedPosition_I));
			return cb_addFeedPosition_I;
		}

		static void n_AddFeedPosition_I (IntPtr jnienv, IntPtr native__this, int position)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddFeedPosition (position);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addFeedPosition' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addFeedPosition", "(I)V", "GetAddFeedPosition_IHandler")]
		public virtual unsafe void AddFeedPosition (int position)
		{
			const string __id = "addFeedPosition.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (position);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addFeedUnit_I;
#pragma warning disable 0169
		static Delegate GetAddFeedUnit_IHandler ()
		{
			if (cb_addFeedUnit_I == null)
				cb_addFeedUnit_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddFeedUnit_I));
			return cb_addFeedUnit_I;
		}

		static void n_AddFeedUnit_I (IntPtr jnienv, IntPtr native__this, int unit)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddFeedUnit (unit);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addFeedUnit' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addFeedUnit", "(I)V", "GetAddFeedUnit_IHandler")]
		public virtual unsafe void AddFeedUnit (int unit)
		{
			const string __id = "addFeedUnit.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (unit);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addHLine_III;
#pragma warning disable 0169
		static Delegate GetAddHLine_IIIHandler ()
		{
			if (cb_addHLine_III == null)
				cb_addHLine_III = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIII_V (n_AddHLine_III));
			return cb_addHLine_III;
		}

		static void n_AddHLine_III (IntPtr jnienv, IntPtr native__this, int x1, int x2, int style)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddHLine (x1, x2, style);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addHLine' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("addHLine", "(III)V", "GetAddHLine_IIIHandler")]
		public virtual unsafe void AddHLine (int x1, int x2, int style)
		{
			const string __id = "addHLine.(III)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (x1);
				__args [1] = new JniArgumentValue (x2);
				__args [2] = new JniArgumentValue (style);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addImage_Landroid_graphics_Bitmap_IIIII;
#pragma warning disable 0169
		static Delegate GetAddImage_Landroid_graphics_Bitmap_IIIIIHandler ()
		{
			if (cb_addImage_Landroid_graphics_Bitmap_IIIII == null)
				cb_addImage_Landroid_graphics_Bitmap_IIIII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIIIII_V (n_AddImage_Landroid_graphics_Bitmap_IIIII));
			return cb_addImage_Landroid_graphics_Bitmap_IIIII;
		}

		static void n_AddImage_Landroid_graphics_Bitmap_IIIII (IntPtr jnienv, IntPtr native__this, IntPtr native_data, int x, int y, int width, int height, int color)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = global::Java.Lang.Object.GetObject<global::Android.Graphics.Bitmap> (native_data, JniHandleOwnership.DoNotTransfer);
			__this.AddImage (data, x, y, width, height, color);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addImage' and count(parameter)=6 and parameter[1][@type='android.graphics.Bitmap'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int']]"
		[Register ("addImage", "(Landroid/graphics/Bitmap;IIIII)V", "GetAddImage_Landroid_graphics_Bitmap_IIIIIHandler")]
		public virtual unsafe void AddImage (global::Android.Graphics.Bitmap? data, int x, int y, int width, int height, int color)
		{
			const string __id = "addImage.(Landroid/graphics/Bitmap;IIIII)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue ((data == null) ? IntPtr.Zero : ((global::Java.Lang.Object) data).Handle);
				__args [1] = new JniArgumentValue (x);
				__args [2] = new JniArgumentValue (y);
				__args [3] = new JniArgumentValue (width);
				__args [4] = new JniArgumentValue (height);
				__args [5] = new JniArgumentValue (color);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (data);
			}
		}

		static Delegate? cb_addImage_Landroid_graphics_Bitmap_IIIIIIID;
#pragma warning disable 0169
		static Delegate GetAddImage_Landroid_graphics_Bitmap_IIIIIIIDHandler ()
		{
			if (cb_addImage_Landroid_graphics_Bitmap_IIIIIIID == null)
				cb_addImage_Landroid_graphics_Bitmap_IIIIIIID = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIIIIIIID_V (n_AddImage_Landroid_graphics_Bitmap_IIIIIIID));
			return cb_addImage_Landroid_graphics_Bitmap_IIIIIIID;
		}

		static void n_AddImage_Landroid_graphics_Bitmap_IIIIIIID (IntPtr jnienv, IntPtr native__this, IntPtr native_data, int x, int y, int width, int height, int color, int mode, int halftone, double brightness)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = global::Java.Lang.Object.GetObject<global::Android.Graphics.Bitmap> (native_data, JniHandleOwnership.DoNotTransfer);
			__this.AddImage (data, x, y, width, height, color, mode, halftone, brightness);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addImage' and count(parameter)=9 and parameter[1][@type='android.graphics.Bitmap'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='int'] and parameter[8][@type='int'] and parameter[9][@type='double']]"
		[Register ("addImage", "(Landroid/graphics/Bitmap;IIIIIIID)V", "GetAddImage_Landroid_graphics_Bitmap_IIIIIIIDHandler")]
		public virtual unsafe void AddImage (global::Android.Graphics.Bitmap? data, int x, int y, int width, int height, int color, int mode, int halftone, double brightness)
		{
			const string __id = "addImage.(Landroid/graphics/Bitmap;IIIIIIID)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [9];
				__args [0] = new JniArgumentValue ((data == null) ? IntPtr.Zero : ((global::Java.Lang.Object) data).Handle);
				__args [1] = new JniArgumentValue (x);
				__args [2] = new JniArgumentValue (y);
				__args [3] = new JniArgumentValue (width);
				__args [4] = new JniArgumentValue (height);
				__args [5] = new JniArgumentValue (color);
				__args [6] = new JniArgumentValue (mode);
				__args [7] = new JniArgumentValue (halftone);
				__args [8] = new JniArgumentValue (brightness);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (data);
			}
		}

		static Delegate? cb_addImage_Landroid_graphics_Bitmap_IIIIIIIDI;
#pragma warning disable 0169
		static Delegate GetAddImage_Landroid_graphics_Bitmap_IIIIIIIDIHandler ()
		{
			if (cb_addImage_Landroid_graphics_Bitmap_IIIIIIIDI == null)
				cb_addImage_Landroid_graphics_Bitmap_IIIIIIIDI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIIIIIIIDI_V (n_AddImage_Landroid_graphics_Bitmap_IIIIIIIDI));
			return cb_addImage_Landroid_graphics_Bitmap_IIIIIIIDI;
		}

		static void n_AddImage_Landroid_graphics_Bitmap_IIIIIIIDI (IntPtr jnienv, IntPtr native__this, IntPtr native_data, int x, int y, int width, int height, int color, int mode, int halftone, double brightness, int compress)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = global::Java.Lang.Object.GetObject<global::Android.Graphics.Bitmap> (native_data, JniHandleOwnership.DoNotTransfer);
			__this.AddImage (data, x, y, width, height, color, mode, halftone, brightness, compress);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addImage' and count(parameter)=10 and parameter[1][@type='android.graphics.Bitmap'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='int'] and parameter[8][@type='int'] and parameter[9][@type='double'] and parameter[10][@type='int']]"
		[Register ("addImage", "(Landroid/graphics/Bitmap;IIIIIIIDI)V", "GetAddImage_Landroid_graphics_Bitmap_IIIIIIIDIHandler")]
		public virtual unsafe void AddImage (global::Android.Graphics.Bitmap? data, int x, int y, int width, int height, int color, int mode, int halftone, double brightness, int compress)
		{
			const string __id = "addImage.(Landroid/graphics/Bitmap;IIIIIIIDI)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [10];
				__args [0] = new JniArgumentValue ((data == null) ? IntPtr.Zero : ((global::Java.Lang.Object) data).Handle);
				__args [1] = new JniArgumentValue (x);
				__args [2] = new JniArgumentValue (y);
				__args [3] = new JniArgumentValue (width);
				__args [4] = new JniArgumentValue (height);
				__args [5] = new JniArgumentValue (color);
				__args [6] = new JniArgumentValue (mode);
				__args [7] = new JniArgumentValue (halftone);
				__args [8] = new JniArgumentValue (brightness);
				__args [9] = new JniArgumentValue (compress);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (data);
			}
		}

		static Delegate? cb_addLayout_IIIIIII;
#pragma warning disable 0169
		static Delegate GetAddLayout_IIIIIIIHandler ()
		{
			if (cb_addLayout_IIIIIII == null)
				cb_addLayout_IIIIIII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIIIIIII_V (n_AddLayout_IIIIIII));
			return cb_addLayout_IIIIIII;
		}

		static void n_AddLayout_IIIIIII (IntPtr jnienv, IntPtr native__this, int type, int width, int height, int marginTop, int marginBottom, int offsetCut, int offsetLabel)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddLayout (type, width, height, marginTop, marginBottom, offsetCut, offsetLabel);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addLayout' and count(parameter)=7 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='int']]"
		[Register ("addLayout", "(IIIIIII)V", "GetAddLayout_IIIIIIIHandler")]
		public virtual unsafe void AddLayout (int type, int width, int height, int marginTop, int marginBottom, int offsetCut, int offsetLabel)
		{
			const string __id = "addLayout.(IIIIIII)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (type);
				__args [1] = new JniArgumentValue (width);
				__args [2] = new JniArgumentValue (height);
				__args [3] = new JniArgumentValue (marginTop);
				__args [4] = new JniArgumentValue (marginBottom);
				__args [5] = new JniArgumentValue (offsetCut);
				__args [6] = new JniArgumentValue (offsetLabel);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addLogo_II;
#pragma warning disable 0169
		static Delegate GetAddLogo_IIHandler ()
		{
			if (cb_addLogo_II == null)
				cb_addLogo_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPII_V (n_AddLogo_II));
			return cb_addLogo_II;
		}

		static void n_AddLogo_II (IntPtr jnienv, IntPtr native__this, int key1, int key2)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddLogo (key1, key2);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addLogo' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("addLogo", "(II)V", "GetAddLogo_IIHandler")]
		public virtual unsafe void AddLogo (int key1, int key2)
		{
			const string __id = "addLogo.(II)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (key1);
				__args [1] = new JniArgumentValue (key2);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addPageArea_IIII;
#pragma warning disable 0169
		static Delegate GetAddPageArea_IIIIHandler ()
		{
			if (cb_addPageArea_IIII == null)
				cb_addPageArea_IIII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIIII_V (n_AddPageArea_IIII));
			return cb_addPageArea_IIII;
		}

		static void n_AddPageArea_IIII (IntPtr jnienv, IntPtr native__this, int x, int y, int width, int height)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddPageArea (x, y, width, height);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addPageArea' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("addPageArea", "(IIII)V", "GetAddPageArea_IIIIHandler")]
		public virtual unsafe void AddPageArea (int x, int y, int width, int height)
		{
			const string __id = "addPageArea.(IIII)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (x);
				__args [1] = new JniArgumentValue (y);
				__args [2] = new JniArgumentValue (width);
				__args [3] = new JniArgumentValue (height);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addPageBegin;
#pragma warning disable 0169
		static Delegate GetAddPageBeginHandler ()
		{
			if (cb_addPageBegin == null)
				cb_addPageBegin = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_AddPageBegin));
			return cb_addPageBegin;
		}

		static void n_AddPageBegin (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddPageBegin ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addPageBegin' and count(parameter)=0]"
		[Register ("addPageBegin", "()V", "GetAddPageBeginHandler")]
		public virtual unsafe void AddPageBegin ()
		{
			const string __id = "addPageBegin.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_addPageDirection_I;
#pragma warning disable 0169
		static Delegate GetAddPageDirection_IHandler ()
		{
			if (cb_addPageDirection_I == null)
				cb_addPageDirection_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddPageDirection_I));
			return cb_addPageDirection_I;
		}

		static void n_AddPageDirection_I (IntPtr jnienv, IntPtr native__this, int dir)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddPageDirection (dir);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addPageDirection' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addPageDirection", "(I)V", "GetAddPageDirection_IHandler")]
		public virtual unsafe void AddPageDirection (int dir)
		{
			const string __id = "addPageDirection.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (dir);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addPageEnd;
#pragma warning disable 0169
		static Delegate GetAddPageEndHandler ()
		{
			if (cb_addPageEnd == null)
				cb_addPageEnd = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_AddPageEnd));
			return cb_addPageEnd;
		}

		static void n_AddPageEnd (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddPageEnd ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addPageEnd' and count(parameter)=0]"
		[Register ("addPageEnd", "()V", "GetAddPageEndHandler")]
		public virtual unsafe void AddPageEnd ()
		{
			const string __id = "addPageEnd.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_addPageLine_IIIII;
#pragma warning disable 0169
		static Delegate GetAddPageLine_IIIIIHandler ()
		{
			if (cb_addPageLine_IIIII == null)
				cb_addPageLine_IIIII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIIIII_V (n_AddPageLine_IIIII));
			return cb_addPageLine_IIIII;
		}

		static void n_AddPageLine_IIIII (IntPtr jnienv, IntPtr native__this, int x1, int y1, int x2, int y2, int style)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddPageLine (x1, y1, x2, y2, style);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addPageLine' and count(parameter)=5 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("addPageLine", "(IIIII)V", "GetAddPageLine_IIIIIHandler")]
		public virtual unsafe void AddPageLine (int x1, int y1, int x2, int y2, int style)
		{
			const string __id = "addPageLine.(IIIII)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (x1);
				__args [1] = new JniArgumentValue (y1);
				__args [2] = new JniArgumentValue (x2);
				__args [3] = new JniArgumentValue (y2);
				__args [4] = new JniArgumentValue (style);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addPagePosition_II;
#pragma warning disable 0169
		static Delegate GetAddPagePosition_IIHandler ()
		{
			if (cb_addPagePosition_II == null)
				cb_addPagePosition_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPII_V (n_AddPagePosition_II));
			return cb_addPagePosition_II;
		}

		static void n_AddPagePosition_II (IntPtr jnienv, IntPtr native__this, int x, int y)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddPagePosition (x, y);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addPagePosition' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("addPagePosition", "(II)V", "GetAddPagePosition_IIHandler")]
		public virtual unsafe void AddPagePosition (int x, int y)
		{
			const string __id = "addPagePosition.(II)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (x);
				__args [1] = new JniArgumentValue (y);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addPageRectangle_IIIII;
#pragma warning disable 0169
		static Delegate GetAddPageRectangle_IIIIIHandler ()
		{
			if (cb_addPageRectangle_IIIII == null)
				cb_addPageRectangle_IIIII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIIIII_V (n_AddPageRectangle_IIIII));
			return cb_addPageRectangle_IIIII;
		}

		static void n_AddPageRectangle_IIIII (IntPtr jnienv, IntPtr native__this, int x1, int y1, int x2, int y2, int style)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddPageRectangle (x1, y1, x2, y2, style);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addPageRectangle' and count(parameter)=5 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("addPageRectangle", "(IIIII)V", "GetAddPageRectangle_IIIIIHandler")]
		public virtual unsafe void AddPageRectangle (int x1, int y1, int x2, int y2, int style)
		{
			const string __id = "addPageRectangle.(IIIII)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (x1);
				__args [1] = new JniArgumentValue (y1);
				__args [2] = new JniArgumentValue (x2);
				__args [3] = new JniArgumentValue (y2);
				__args [4] = new JniArgumentValue (style);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addPulse_II;
#pragma warning disable 0169
		static Delegate GetAddPulse_IIHandler ()
		{
			if (cb_addPulse_II == null)
				cb_addPulse_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPII_V (n_AddPulse_II));
			return cb_addPulse_II;
		}

		static void n_AddPulse_II (IntPtr jnienv, IntPtr native__this, int drawer, int time)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddPulse (drawer, time);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addPulse' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("addPulse", "(II)V", "GetAddPulse_IIHandler")]
		public virtual unsafe void AddPulse (int drawer, int time)
		{
			const string __id = "addPulse.(II)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (drawer);
				__args [1] = new JniArgumentValue (time);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addSound_II;
#pragma warning disable 0169
		static Delegate GetAddSound_IIHandler ()
		{
			if (cb_addSound_II == null)
				cb_addSound_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPII_V (n_AddSound_II));
			return cb_addSound_II;
		}

		static void n_AddSound_II (IntPtr jnienv, IntPtr native__this, int pattern, int repeat)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddSound (pattern, repeat);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addSound' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("addSound", "(II)V", "GetAddSound_IIHandler")]
		public virtual unsafe void AddSound (int pattern, int repeat)
		{
			const string __id = "addSound.(II)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (pattern);
				__args [1] = new JniArgumentValue (repeat);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addSound_III;
#pragma warning disable 0169
		static Delegate GetAddSound_IIIHandler ()
		{
			if (cb_addSound_III == null)
				cb_addSound_III = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIII_V (n_AddSound_III));
			return cb_addSound_III;
		}

		static void n_AddSound_III (IntPtr jnienv, IntPtr native__this, int pattern, int repeat, int cycle)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddSound (pattern, repeat, cycle);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addSound' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("addSound", "(III)V", "GetAddSound_IIIHandler")]
		public virtual unsafe void AddSound (int pattern, int repeat, int cycle)
		{
			const string __id = "addSound.(III)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (pattern);
				__args [1] = new JniArgumentValue (repeat);
				__args [2] = new JniArgumentValue (cycle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addSymbol_Ljava_lang_String_IIIII;
#pragma warning disable 0169
		static Delegate GetAddSymbol_Ljava_lang_String_IIIIIHandler ()
		{
			if (cb_addSymbol_Ljava_lang_String_IIIII == null)
				cb_addSymbol_Ljava_lang_String_IIIII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIIIII_V (n_AddSymbol_Ljava_lang_String_IIIII));
			return cb_addSymbol_Ljava_lang_String_IIIII;
		}

		static void n_AddSymbol_Ljava_lang_String_IIIII (IntPtr jnienv, IntPtr native__this, IntPtr native_data, int type, int level, int width, int height, int size)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = JNIEnv.GetString (native_data, JniHandleOwnership.DoNotTransfer);
			__this.AddSymbol (data, type, level, width, height, size);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addSymbol' and count(parameter)=6 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int']]"
		[Register ("addSymbol", "(Ljava/lang/String;IIIII)V", "GetAddSymbol_Ljava_lang_String_IIIIIHandler")]
		public virtual unsafe void AddSymbol (string? data, int type, int level, int width, int height, int size)
		{
			const string __id = "addSymbol.(Ljava/lang/String;IIIII)V";
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (type);
				__args [2] = new JniArgumentValue (level);
				__args [3] = new JniArgumentValue (width);
				__args [4] = new JniArgumentValue (height);
				__args [5] = new JniArgumentValue (size);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_data);
			}
		}

		static Delegate? cb_addText_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetAddText_Ljava_lang_String_Handler ()
		{
			if (cb_addText_Ljava_lang_String_ == null)
				cb_addText_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_AddText_Ljava_lang_String_));
			return cb_addText_Ljava_lang_String_;
		}

		static void n_AddText_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_data)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = JNIEnv.GetString (native_data, JniHandleOwnership.DoNotTransfer);
			__this.AddText (data);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addText' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("addText", "(Ljava/lang/String;)V", "GetAddText_Ljava_lang_String_Handler")]
		public virtual unsafe void AddText (string? data)
		{
			const string __id = "addText.(Ljava/lang/String;)V";
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_data);
			}
		}

		static Delegate? cb_addTextAlign_I;
#pragma warning disable 0169
		static Delegate GetAddTextAlign_IHandler ()
		{
			if (cb_addTextAlign_I == null)
				cb_addTextAlign_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddTextAlign_I));
			return cb_addTextAlign_I;
		}

		static void n_AddTextAlign_I (IntPtr jnienv, IntPtr native__this, int align)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddTextAlign (align);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addTextAlign' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addTextAlign", "(I)V", "GetAddTextAlign_IHandler")]
		public virtual unsafe void AddTextAlign (int align)
		{
			const string __id = "addTextAlign.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (align);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addTextDouble_II;
#pragma warning disable 0169
		static Delegate GetAddTextDouble_IIHandler ()
		{
			if (cb_addTextDouble_II == null)
				cb_addTextDouble_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPII_V (n_AddTextDouble_II));
			return cb_addTextDouble_II;
		}

		static void n_AddTextDouble_II (IntPtr jnienv, IntPtr native__this, int dw, int dh)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddTextDouble (dw, dh);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addTextDouble' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("addTextDouble", "(II)V", "GetAddTextDouble_IIHandler")]
		public virtual unsafe void AddTextDouble (int dw, int dh)
		{
			const string __id = "addTextDouble.(II)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (dw);
				__args [1] = new JniArgumentValue (dh);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addTextFont_I;
#pragma warning disable 0169
		static Delegate GetAddTextFont_IHandler ()
		{
			if (cb_addTextFont_I == null)
				cb_addTextFont_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddTextFont_I));
			return cb_addTextFont_I;
		}

		static void n_AddTextFont_I (IntPtr jnienv, IntPtr native__this, int font)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddTextFont (font);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addTextFont' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addTextFont", "(I)V", "GetAddTextFont_IHandler")]
		public virtual unsafe void AddTextFont (int font)
		{
			const string __id = "addTextFont.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (font);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addTextLang_I;
#pragma warning disable 0169
		static Delegate GetAddTextLang_IHandler ()
		{
			if (cb_addTextLang_I == null)
				cb_addTextLang_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddTextLang_I));
			return cb_addTextLang_I;
		}

		static void n_AddTextLang_I (IntPtr jnienv, IntPtr native__this, int lang)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddTextLang (lang);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addTextLang' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addTextLang", "(I)V", "GetAddTextLang_IHandler")]
		public virtual unsafe void AddTextLang (int lang)
		{
			const string __id = "addTextLang.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (lang);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addTextLineSpace_I;
#pragma warning disable 0169
		static Delegate GetAddTextLineSpace_IHandler ()
		{
			if (cb_addTextLineSpace_I == null)
				cb_addTextLineSpace_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddTextLineSpace_I));
			return cb_addTextLineSpace_I;
		}

		static void n_AddTextLineSpace_I (IntPtr jnienv, IntPtr native__this, int linespc)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddTextLineSpace (linespc);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addTextLineSpace' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addTextLineSpace", "(I)V", "GetAddTextLineSpace_IHandler")]
		public virtual unsafe void AddTextLineSpace (int linespc)
		{
			const string __id = "addTextLineSpace.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (linespc);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addTextPosition_I;
#pragma warning disable 0169
		static Delegate GetAddTextPosition_IHandler ()
		{
			if (cb_addTextPosition_I == null)
				cb_addTextPosition_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddTextPosition_I));
			return cb_addTextPosition_I;
		}

		static void n_AddTextPosition_I (IntPtr jnienv, IntPtr native__this, int x)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddTextPosition (x);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addTextPosition' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addTextPosition", "(I)V", "GetAddTextPosition_IHandler")]
		public virtual unsafe void AddTextPosition (int x)
		{
			const string __id = "addTextPosition.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (x);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addTextRotate_I;
#pragma warning disable 0169
		static Delegate GetAddTextRotate_IHandler ()
		{
			if (cb_addTextRotate_I == null)
				cb_addTextRotate_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddTextRotate_I));
			return cb_addTextRotate_I;
		}

		static void n_AddTextRotate_I (IntPtr jnienv, IntPtr native__this, int rotate)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddTextRotate (rotate);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addTextRotate' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addTextRotate", "(I)V", "GetAddTextRotate_IHandler")]
		public virtual unsafe void AddTextRotate (int rotate)
		{
			const string __id = "addTextRotate.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (rotate);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addTextSize_II;
#pragma warning disable 0169
		static Delegate GetAddTextSize_IIHandler ()
		{
			if (cb_addTextSize_II == null)
				cb_addTextSize_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPII_V (n_AddTextSize_II));
			return cb_addTextSize_II;
		}

		static void n_AddTextSize_II (IntPtr jnienv, IntPtr native__this, int width, int height)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddTextSize (width, height);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addTextSize' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("addTextSize", "(II)V", "GetAddTextSize_IIHandler")]
		public virtual unsafe void AddTextSize (int width, int height)
		{
			const string __id = "addTextSize.(II)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (width);
				__args [1] = new JniArgumentValue (height);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addTextSmooth_I;
#pragma warning disable 0169
		static Delegate GetAddTextSmooth_IHandler ()
		{
			if (cb_addTextSmooth_I == null)
				cb_addTextSmooth_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_AddTextSmooth_I));
			return cb_addTextSmooth_I;
		}

		static void n_AddTextSmooth_I (IntPtr jnienv, IntPtr native__this, int smooth)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddTextSmooth (smooth);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addTextSmooth' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("addTextSmooth", "(I)V", "GetAddTextSmooth_IHandler")]
		public virtual unsafe void AddTextSmooth (int smooth)
		{
			const string __id = "addTextSmooth.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (smooth);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addTextStyle_IIII;
#pragma warning disable 0169
		static Delegate GetAddTextStyle_IIIIHandler ()
		{
			if (cb_addTextStyle_IIII == null)
				cb_addTextStyle_IIII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIIII_V (n_AddTextStyle_IIII));
			return cb_addTextStyle_IIII;
		}

		static void n_AddTextStyle_IIII (IntPtr jnienv, IntPtr native__this, int reverse, int ul, int em, int color)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddTextStyle (reverse, ul, em, color);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addTextStyle' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("addTextStyle", "(IIII)V", "GetAddTextStyle_IIIIHandler")]
		public virtual unsafe void AddTextStyle (int reverse, int ul, int em, int color)
		{
			const string __id = "addTextStyle.(IIII)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (reverse);
				__args [1] = new JniArgumentValue (ul);
				__args [2] = new JniArgumentValue (em);
				__args [3] = new JniArgumentValue (color);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addVLineBegin_II;
#pragma warning disable 0169
		static Delegate GetAddVLineBegin_IIHandler ()
		{
			if (cb_addVLineBegin_II == null)
				cb_addVLineBegin_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPII_V (n_AddVLineBegin_II));
			return cb_addVLineBegin_II;
		}

		static void n_AddVLineBegin_II (IntPtr jnienv, IntPtr native__this, int x, int style)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddVLineBegin (x, style);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addVLineBegin' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("addVLineBegin", "(II)V", "GetAddVLineBegin_IIHandler")]
		public virtual unsafe void AddVLineBegin (int x, int style)
		{
			const string __id = "addVLineBegin.(II)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (x);
				__args [1] = new JniArgumentValue (style);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addVLineEnd_II;
#pragma warning disable 0169
		static Delegate GetAddVLineEnd_IIHandler ()
		{
			if (cb_addVLineEnd_II == null)
				cb_addVLineEnd_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPII_V (n_AddVLineEnd_II));
			return cb_addVLineEnd_II;
		}

		static void n_AddVLineEnd_II (IntPtr jnienv, IntPtr native__this, int x, int style)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddVLineEnd (x, style);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='addVLineEnd' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("addVLineEnd", "(II)V", "GetAddVLineEnd_IIHandler")]
		public virtual unsafe void AddVLineEnd (int x, int style)
		{
			const string __id = "addVLineEnd.(II)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (x);
				__args [1] = new JniArgumentValue (style);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_clearCommandBuffer;
#pragma warning disable 0169
		static Delegate GetClearCommandBufferHandler ()
		{
			if (cb_clearCommandBuffer == null)
				cb_clearCommandBuffer = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_ClearCommandBuffer));
			return cb_clearCommandBuffer;
		}

		static void n_ClearCommandBuffer (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.ClearCommandBuffer ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='clearCommandBuffer' and count(parameter)=0]"
		[Register ("clearCommandBuffer", "()V", "GetClearCommandBufferHandler")]
		public virtual unsafe void ClearCommandBuffer ()
		{
			const string __id = "clearCommandBuffer.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_getHandle;
#pragma warning disable 0169
		static Delegate GetGetHandleHandler ()
		{
			if (cb_getHandle == null)
				cb_getHandle = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_J (n_GetHandle));
			return cb_getHandle;
		}

		static long n_GetHandle (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Epson.Eposprint.Builder> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.GetHandle ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.epson.eposprint']/class[@name='Builder']/method[@name='getHandle' and count(parameter)=0]"
		[Register ("getHandle", "()J", "GetGetHandleHandler")]
		protected virtual unsafe long GetHandle ()
		{
			const string __id = "getHandle.()J";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualInt64Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

	}
}
